@inherits KittySaver.Wasm.Shared.Components.ApiAwareComponentBase
@using KittySaver.Shared.Requests
@using KittySaver.Wasm.Shared.Auth
@using KittySaver.Wasm.Shared.HttpClients
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IApiClient ApiClient

<nav class="nav">
    <div class="logo">
        <a href="/">
            <img src="/imgs/catWhiteTransparent.webp" alt="">
            <span>uratujkota.pl</span>
        </a>
    </div>
    <div class="hamburger" @onclick="ToggleNavMenu">
        <span></span>
        <span></span>
        <span></span>
    </div>
    <div class="nav_content @(_showNavMenu ? "active" : "")">
        <a href="/" @onclick="ToggleNavMenu">Ogłoszenia</a>
        <a href="/mission" @onclick="ToggleNavMenu">Misja</a>
        <AuthorizeView>
            <Authorized>
                <a href="/user/cats" @onclick="ToggleNavMenu">Moje koty</a>
                <a href="/user/advertisements" @onclick="ToggleNavMenu">Moje ogłoszenia</a>
                <a href="/user/profile" @onclick="ToggleNavMenu">Twój profil</a>
                <a class="cp" @onclick="Logout">Wyloguj</a>
            </Authorized>
            <NotAuthorized>
                <a href="/login" @onclick="ToggleNavMenu">Zaloguj się</a>
                <a href="/register" @onclick="ToggleNavMenu">Zarejestruj się</a>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</nav>

@code {
    private bool _showNavMenu;
    private bool _isLoggingOut;

    private void ToggleNavMenu()
    {
        _showNavMenu = !_showNavMenu;
    }

    private async Task Logout()
    {
        if (_isLoggingOut) return;

        _isLoggingOut = true;

        try
        {
            // Get refresh token to revoke it
            string? refreshToken = await LocalStorage.GetItemAsStringAsync("refresh_token");

            if (!string.IsNullOrEmpty(refreshToken))
            {
                refreshToken = refreshToken.Replace("\"", "");

                // Call API to revoke the refresh token
                try
                {
                    await ApiClient.PostAsync<LogoutRequest, object>(
                        "https://localhost:44371/api/v1/application-users/logout",
                        new LogoutRequest(refreshToken));
                }
                catch
                {
                    // If revoking fails, we still want to log out locally
                }
            }

            // Clear tokens from local storage
            if (AuthenticationStateProvider is CustomAuthStateProvider customProvider)
            {
                await customProvider.ClearAuthData();
            }
            else
            {
                await LocalStorage.RemoveItemAsync("token");
                await LocalStorage.RemoveItemAsync("token_expires");
                await LocalStorage.RemoveItemAsync("refresh_token");
                await LocalStorage.RemoveItemAsync("refresh_token_expires");
                await AuthenticationStateProvider.GetAuthenticationStateAsync();
            }

            await ApiNavigation.RefreshAsync();
            ToggleNavMenu();
            NavigationManager.NavigateTo("/");
        }
        finally
        {
            _isLoggingOut = false;
        }
    }
}