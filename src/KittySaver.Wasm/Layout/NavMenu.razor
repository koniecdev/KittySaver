@using KittySaver.Wasm.Shared.HttpClients.MainApiResponses
@inherits KittySaver.Wasm.Shared.Components.ApiAwareComponentBase
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider

<nav class="nav">
    <div class="logo">
        <a href="/">
            <img src="/imgs/catWhiteTransparent.webp" alt="">
            uratujkota.pl
        </a>
    </div>
    <div class="hamburger">
        
    </div>
    <div class="nav_content">
        <a href="/">Ogłoszenia</a>
        <a href="/mission">Misja</a>
        @if (_getPersonCatsLink is not null)
        {
            <a href="/my-cats">Moje koty</a>
        }
        @if (_getPersonAdvertisementsLink is not null)
        {
            <a href="/my-advertisements">Moje ogłoszenia</a>
        }
        @if (!_userIsLoggedIn)
        {
            <a href="/login">Zaloguj się</a>
            <a href="/register">Zarejestruj się</a>
        }
        else
        {
            <a href="/profile">Mój profil</a>
            <button @onclick="Logout">Wyloguj</button>
        }
    </div>
</nav>
@code
{
    private bool _userIsLoggedIn = false;
    private Link? _getPersonAdvertisementsLink;
    private Link? _getPersonCatsLink;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _getPersonAdvertisementsLink = ApiNavigation.GetLink(EndpointRels.Advertisement.GetPersonAdvertisementsRel);
        _getPersonCatsLink = ApiNavigation.GetLink(EndpointRels.Cat.GetCatsRel);
        if (_getPersonAdvertisementsLink is not null && _getPersonCatsLink is not null)
        {
            _userIsLoggedIn = true;
        }
    }

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("token");
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }
}
