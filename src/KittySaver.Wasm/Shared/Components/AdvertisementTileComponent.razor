@using KittySaver.Shared.Hateoas
@using KittySaver.Shared.Responses

<div class="listing_element subpage_cat_tile">
    <header class="subpage_cat_tile_header">
        <div class="subpage_cat_image_wrapper">
            <div class="subpage_cat_image">
                @{
                    Link? getAdThumbnailLink = Advertisement.Links
                        .FirstOrDefault(x => x.Rel == EndpointRels.Advertisement.GetAdvertisementThumbnailRel);
                    if (getAdThumbnailLink is not null)
                    {
                        <img alt="@Advertisement.Title - uratujkota.pl" src="@getAdThumbnailLink.Href?cachebuster=@DateTimeOffset.Now">
                    }
                    else
                    {
                        <img alt="uratujkota.pl" src="/imgs/defaultCat.webp">
                    }
                }
            </div>
        </div>
        <div class="subpage_cat_info">
            <h2>@Advertisement.Title</h2>
            @if (!IsOnlyEssentialsRequested)
            {
                @if (IsManagementView)
                {
                    <div class="subpage_cat_info_sentence @Dictionaries.AdvertisementStatusDictionary[Advertisement.Status].className">
                        <strong class="subpage_cat_info_btn">
                            @TranslateAdvertisementStatus(Advertisement.Status)
                        </strong>
                    </div>
                }
                
                <div class="subpage_cat_info_sentence">
                    <strong class="subpage_cat_info_btn">
                        @(Advertisement.Cats.Count == 1 ? "1 kot w ogłoszeniu." : $"{Advertisement.Cats.Count} koty w ogłoszeniu.")
                    </strong>
                </div>
                
                <div class="subpage_cat_info_sentence">
                    <strong class="subpage_cat_info_btn">
                        Lokalizacja: @Advertisement.PickupAddress.City
                    </strong>
                </div>
                
                @if (!string.IsNullOrWhiteSpace(Advertisement.PickupAddress.State))
                {
                    <div class="subpage_cat_info_sentence">
                        <strong class="subpage_cat_info_btn">
                            Województwo: @Advertisement.PickupAddress.State
                        </strong>
                    </div>
                }
            }
        </div>
    </header>
    @if (!IsOnlyEssentialsRequested && !string.IsNullOrWhiteSpace(Advertisement.Description))
    {
        <article class="subpage_cat_additional_requirements">
            <strong>Opis</strong>
            <p>
                @(Advertisement.Description.Length > 50 ? Advertisement.Description[..50]+"..." : Advertisement.Description)
            </p>
        </article>
    }
    @if (IsManagementView)
    {
        <div class="subpage_cat_actions">
            @{
                bool isUpdateAdvertisementLinkEnabled = Advertisement.Links.Any(x => x.Rel == EndpointRels.Advertisement.UpdateAdvertisementRel);
                bool isDeleteAdvertisementLinkEnabled = Advertisement.Links.Any(x => x.Rel == EndpointRels.Advertisement.DeleteAdvertisementRel);
                bool isCloseAdvertisementLinkEnabled = Advertisement.Links.Any(x => x.Rel == EndpointRels.Advertisement.CloseAdvertisementRel);
            }
            @if (isUpdateAdvertisementLinkEnabled)
            {
                <a href="/user/advertisements/update/@Advertisement.Id" class="default_btn">
                    Edytuj ogłoszenie
                </a>
            }
            @if (isDeleteAdvertisementLinkEnabled)
            {
                <a href="/user/advertisements/delete/@Advertisement.Id" class="default_btn btn_red">
                    Usuń ogłoszenie
                </a>
            }
            @if (isCloseAdvertisementLinkEnabled)
            {
                <a href="/user/advertisements/close/@Advertisement.Id" class="default_btn">
                    Zakończ ogłoszenie
                </a>
            }
        </div>
    }
</div>

@code {
    /// <summary>
    /// The advertisement data to display in the tile.
    /// </summary>
    [Parameter]
    public AdvertisementResponse Advertisement { get; set; } = null!;
    
    /// <summary>
    /// Determines if this tile is being used in the advertisement management view.
    /// When true, shows advertisement status and management buttons.
    /// When false, hides these elements (for public advertisement view).
    /// </summary>
    [Parameter]
    public bool IsManagementView { get; set; }
    
    /// <summary>
    /// When true, only essential information is displayed.
    /// </summary>
    [Parameter] 
    public bool IsOnlyEssentialsRequested { get; set; }
    
    /// <summary>
    /// Tłumaczy status ogłoszenia na przyjazny dla użytkownika tekst
    /// </summary>
    private string TranslateAdvertisementStatus(AdvertisementStatus status)
    {
        return status switch
        {
            AdvertisementStatus.Active => "Ogłoszenie aktywne.",
            AdvertisementStatus.Closed => "Ogłoszenie zakończone.",
            AdvertisementStatus.Expired => "Ogłoszenie wygasło.",
            AdvertisementStatus.ThumbnailNotUploaded => "Brak wymaganej miniaturki.",
            _ => Dictionaries.AdvertisementStatusDictionary[status].text
        };
    }
}