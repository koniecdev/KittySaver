@using KittySaver.Shared.Hateoas
@using KittySaver.Shared.Responses
@using KittySaver.Wasm.Shared.HttpClients
@using MudBlazor
@inject IApiClient ApiClient

<div class="listing_element subpage_cat_tile">
    <header class="subpage_cat_tile_header">
        <div class="subpage_cat_image_wrapper">
            <div class="subpage_cat_image">
                @{
                    bool hasMultipleImages = (Cat.IsThumbnailUploaded && _galleryImages.Count > 0) || _galleryImages.Count > 1;
                }

                @if (_isLoadingGallery)
                {
                    <div class="d-flex" style="height:280px">
                        <MudProgressCircular Color="Color.Primary" Class="mx-auto my-auto" Indeterminate="true" />
                    </div>
                }
                else if (hasMultipleImages)
                {
                    <MudCarousel Class="mud-width-full rounded-lg" Style="height:280px;"
                                 ShowArrows="true"
                                 ShowBullets="true"
                                 EnableSwipeGesture="true"
                                 AutoCycle="false"
                                 Color="Color.Primary"
                                 TData="object">
                        @if (Cat.IsThumbnailUploaded)
                        {
                            <MudCarouselItem Transition="Transition.None" >
                                <div class="d-flex justify-center" style="height:100%">
                                    <div class="img_wrapper">
                                        <img src="@Cat.Links.FirstOrDefault(x => x.Rel == EndpointRels.Cat.GetCatThumbnailRel)?.Href?cachebuster=@DateTimeOffset.Now"
                                             alt="@Cat.Name - uratujkota.pl"
                                             style="max-height: 100%; object-fit: contain;"/>
                                    </div>
                                </div>
                            </MudCarouselItem>
                        }

                        @foreach (PictureResponse image in _galleryImages)
                        {
                            <MudCarouselItem Transition="Transition.None">
                                <div class="d-flex justify-center" style="height:100%">
                                    <div class="img_wrapper">
                                        <img src="@GetGalleryImageUrl(image.FilenameWithExtension)?cachebuster=@DateTimeOffset.Now"
                                             alt="@Cat.Name - zdjęcie z galerii"
                                             style="max-width: 100%; object-fit: contain;"/>
                                    </div>
                                </div>
                            </MudCarouselItem>
                        }
                    </MudCarousel>
                }
                else
                {
                    <div class="d-flex justify-center" style="height:280px">
                        @if (Cat.IsThumbnailUploaded)
                        {
                            <div class="img_wrapper">
                                <img src="@Cat.Links.FirstOrDefault(x => x.Rel == EndpointRels.Cat.GetCatThumbnailRel)?.Href?cachebuster=@DateTimeOffset.Now"
                                     alt="@Cat.Name - uratujkota.pl"
                                     style="max-width: 100%; object-fit: contain;" />
                            </div>
                        }
                        else if (_galleryImages.Count == 1)
                        {
                            <div class="img_wrapper">
                                <img src="@GetGalleryImageUrl(_galleryImages[0].FilenameWithExtension)?cachebuster=@DateTimeOffset.Now"
                                     alt="@Cat.Name - zdjęcie z galerii"
                                     style="max-width: 100%; object-fit: contain;" />
                            </div>
                        }
                        else
                        {
                            <div class="img_wrapper">
                                <img src="/imgs/defaultCat.webp"
                                     alt="uratujkota.pl"
                                     style="max-width: 100%; object-fit: contain;" />
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
        <div class="subpage_cat_info">
            <h2>@Cat.Name</h2>
            @if (!IsOnlyEssentialsRequested)
            {
                @if (IsManagementView)
                {
                    <div class="subpage_cat_info_sentence">
                        <strong class="subpage_cat_info_btn">
                            @(Cat.IsAssignedToAdvertisement ? "Kot jest dodany do ogłoszenia." : "Kot nie jest dodany do ogłoszenia.")
                        </strong>
                    </div>
                }

                <div class="subpage_cat_info_sentence @Dictionaries.HealthStatusDictionary[Cat.HealthStatus].className">
                    <strong class="subpage_cat_info_btn">
                        @TranslateHealthStatus(Cat.HealthStatus)
                    </strong>
                </div>
                <div class="subpage_cat_info_sentence">
                    <strong class="subpage_cat_info_btn">
                        @(Cat.IsCastrated ? "Wykastrowany / wysterylizowany." : "Niewykastrowany / niewysterylizowany.")
                    </strong>
                </div>
                <div class="subpage_cat_info_sentence @Dictionaries.MedicalHelpUrgencyDictionary[Cat.MedicalHelpUrgency].className">
                    <strong class="subpage_cat_info_btn">
                        @TranslateMedicalUrgency(Cat.MedicalHelpUrgency)
                    </strong>
                </div>
                <div class="subpage_cat_info_sentence">
                    <strong class="subpage_cat_info_btn">
                        @TranslateAgeCategory(Cat.AgeCategory)
                    </strong>
                </div>
            }
        </div>
    </header>
    @if (!IsOnlyEssentialsRequested && !string.IsNullOrWhiteSpace(Cat.AdditionalRequirements))
    {
        <article class="subpage_cat_additional_requirements">
            <strong>Opis kota</strong>
            <p>
                @Cat.AdditionalRequirements
            </p>
        </article>
    }
    @if (IsManagementView)
    {
        <div class="subpage_cat_actions">
            @{
                bool isUpdateCatLinkEnabled = Cat.Links.Any(x => x.Rel == EndpointRels.Cat.UpdateCatRel);
                bool isDeleteCatLinkEnabled = Cat.Links.Any(x => x.Rel == EndpointRels.Cat.DeleteCatRel);
            }
            @if (isUpdateCatLinkEnabled)
            {
                <a href="/user/cats/update/@Cat.Id" class="default_btn">
                    Edytuj dane
                </a>
            }
            @if (isDeleteCatLinkEnabled)
            {
                <a href="/user/cats/delete/@Cat.Id" class="default_btn btn_red">
                    Usuń kota
                </a>
            }
        </div>
    }
</div>

@code 
{
    [Parameter]
    public CatResponse Cat { get; set; } = null!;

    [Parameter]
    public bool IsManagementView { get; set; }

    [Parameter] 
    public bool IsOnlyEssentialsRequested { get; set; }
    
    private bool _isLoadingGallery = true;
    private List<PictureResponse> _galleryImages = [];
    
    protected override async Task OnInitializedAsync()
    {
        await LoadGalleryImages();
        await base.OnInitializedAsync();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        await LoadGalleryImages();
        await base.OnParametersSetAsync();
    }
    
    private async Task LoadGalleryImages()
    {
        try
        {
            _isLoadingGallery = true;
            
            Link? galleryLink = Cat.Links.FirstOrDefault(x => x.Rel == EndpointRels.Cat.GetCatGalleryRel);
            
            if (galleryLink != null)
            {
                var response = await ApiClient.GetAsync<List<PictureResponse>>(galleryLink.Href);
                _galleryImages = response ?? [];
            }
        }
        catch (Exception)
        {
            // Silently handle errors - will show default image if needed
            _galleryImages = [];
        }
        finally
        {
            _isLoadingGallery = false;
            StateHasChanged();
        }
    }
    
    private string GetGalleryImageUrl(string filename)
    {
        Link? galleryImageLink = Cat.Links.FirstOrDefault(x => x.Rel == EndpointRels.Cat.GetCatGalleryPictureRel);
        if (galleryImageLink is null)
        {
            return "";
        }
        
        return galleryImageLink.Href
            .Replace("{personId}", Cat.PersonId.ToString())
            .Replace("{id}", Cat.Id.ToString())
            .Replace("{filename}", filename);
    }

    private string TranslateHealthStatus(string status)
    {
        return status.ToLower() switch
        {
            "good" => "Wolny od chorób.",
            "unknown" => "Nie został zbadany pod względem chorób.",
            "chronicminor" => "Posiada choroby przewlekłe.",
            "chronicserious" => "Posiada poważne choroby przewlekłe.",
            "terminal" => "Jest śmiertelnie chory.",
            _ => status.StartsWith("Kot") ? status.Replace("Kot ", "") : status
        };
    }

    private string TranslateAgeCategory(string ageCategory)
    {
        return ageCategory.ToLower() switch
        {
            "baby" => "Kociak.",
            "adult" => "Dorosły.",
            "senior" => "Senior.",
            _ => ageCategory.StartsWith("Kot ") ? ageCategory.Replace("Kot ", "") : ageCategory
        };
    }

    private string TranslateMedicalUrgency(string urgency)
    {
        return urgency.ToLower() switch
        {
            "havetoseevet" => "Musi zostać pokazany weterynarzowi.",
            "shouldseevet" => "Powinien zostać pokazany weterynarzowi.",
            _ => urgency.StartsWith("Kot ") ? urgency.Replace("Kot ", "") : urgency
        };
    }
}