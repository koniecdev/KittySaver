@page "/register"
@using Ardalis.Result
@using KittySaver.Shared.Hateoas
@using KittySaver.Shared.Requests
@using KittySaver.Wasm.Shared.Extensions
@using KittySaver.Wasm.Shared.HttpClients
@inherits KittySaver.Wasm.Shared.Components.ApiAwareComponentBase
@inject IApiClient ApiClient
@inject NavigationManager NavigationManager

<PageTitle>Uratujkota.pl - Rejestracja konta - Bo życie kotków jest priorytetem - Portal adopcyjny dla potrzebujących
    kotów.
</PageTitle>

<div class="register_wrapper">
    @if (_registrationSuccess)
    {
        <section class="register_success">
            <div class="success-container">
                <div class="success-icon">✓</div>
                <h2>Rejestracja przebiegła pomyślnie!</h2>
                <p>Na Twój adres email <strong>@_registerDto.Email</strong> wysłaliśmy wiadomość z linkiem aktywacyjnym.
                </p>
                <p>Proszę kliknij w link w wiadomości, aby potwierdzić swój adres email i aktywować konto.</p>
                <p>Jeśli nie otrzymasz wiadomości w ciągu kilku minut, sprawdź folder spam lub kliknij poniższy link,
                    aby wysłać link aktywacyjny ponownie.</p>
                <div class="action-buttons">
                    <a href="/login" class="default_btn">Przejdź do logowania</a>
                    <a href="/resend-email-confirmation" class="default_btn">Wyślij link aktywacyjny ponownie</a>
                </div>
            </div>
        </section>
    }
    else
    {
        <section class="register_container">
            <header>
                <h2>Rejestracja konta</h2>
                <p>Konto w naszym serwisie umożliwia dodawanie ogłoszeń adopcyjnych - nie potrzebujesz konta, jeżeli
                    chcesz tylko adoptować kociaki!</p>
            </header>

            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="error-message">
                    <p>@_errorMessage</p>
                </div>
            }

            <EditForm Model="_registerDto" OnSubmit="HandleRegister" class="register_form">
                <header>
                    <h3>
                        Twoje dane
                    </h3>
                    <p>
                        Nikomu nie udostępnimy twojego prywatnego adresu email oraz prywatnego numeru telefonu.
                        <br>
                        Twój kontaktowy adres email i kontaktowy numer telefonu będą widoczne dopiero po dodaniu
                        ogłoszenia.
                        <br>
                        Zarówno konkaktowy adres email, kontaktowy numer telefonu, kontaktowy adres - Można modyfikować
                        dowolnie przy późniejszym dodawaniu ogłoszeń.
                    </p>
                </header>
                <div class="login_form_tile">
                    <label for="email">Twój prywatny adres email:</label>
                    <InputText id="email" type="email" @bind-Value="_registerDto.Email" required/>
                    <div class="login_form_errors">
                        @if (_emailIsInvalid)
                        {
                            foreach (string error in _emailErrors)
                            {
                                <div class="input_error">@error</div>
                            }
                        }
                    </div>
                </div>
                <div class="login_form_tile">
                    <label for="phoneNumber">Twój prywatny numer telefonu:</label>
                    <InputText id="phoneNumber" type="text" @bind-Value="_registerDto.PhoneNumber" required/>
                    <div class="login_form_errors">
                        @if (_phoneNumberIsInvalid)
                        {
                            foreach (string error in _phoneNumberErrors)
                            {
                                <div class="input_error">@error</div>
                            }
                        }
                    </div>
                </div>
                <div class="login_form_tile">
                    <label for="password">Twoje hasło (conajmniej 8 znaków, duża i mała litera, cyfra):</label>
                    <InputText id="password" type="password" @bind-Value="_registerDto.Password" required/>
                    <div class="login_form_errors">
                        @if (_passwordIsInvalid)
                        {
                            foreach (string error in _passwordErrors)
                            {
                                <div class="input_error">@error</div>
                            }
                        }
                    </div>
                </div>
                <div class="login_form_tile">
                    <label for="confirmPassword">Potwierdź hasło:</label>
                    <InputText id="confirmPassword" type="password" @bind-Value="_registerDto.ConfirmPassword" required/>
                </div>
                <div class="login_form_tile">
                    <label for="contactEmail">Twój domyślny kontaktowy adres email, który ma być wyświetlany w Twoich
                        ogłoszeniach:</label>
                    <InputText id="contactEmail" type="email" @bind-Value="_registerDto.DefaultAdvertisementContactInfoEmail" required/>
                    <div class="login_form_errors">
                        @if (_defaultAdvertisementContactInfoEmailIsInvalid)
                        {
                            foreach (string error in _defaultAdvertisementContactInfoEmailErrors)
                            {
                                <div class="input_error">@error</div>
                            }
                        }
                    </div>
                </div>
                <div class="login_form_tile">
                    <label for="contactPhone">Twój domyślnie kontaktowy numer telefonu, który ma być wyświetlany w
                        twoich ogłoszeniach:</label>
                    <InputText id="contactPhone" type="text" @bind-Value="_registerDto.DefaultAdvertisementContactInfoPhoneNumber" required/>
                    <div class="login_form_errors">
                        @if (_defaultAdvertisementContactInfoPhoneNumberIsInvalid)
                        {
                            foreach (string error in _defaultAdvertisementContactInfoPhoneNumberErrors)
                            {
                                <div class="input_error">@error</div>
                            }
                        }
                    </div>
                </div>
                <div class="login_form_tile">
                    <label for="nickname">Twoja nazwa/imię jakie chcesz by się wyświetlało w Twoich ogłoszeniach:</label>
                    <InputText id="nickname" type="text" @bind-Value="_registerDto.Nickname" required/>
                    <div class="login_form_errors">
                        @if (_nicknameIsInvalid)
                        {
                            foreach (string error in _nicknameErrors)
                            {
                                <div class="input_error">@error</div>
                            }
                        }
                    </div>
                </div>
                <header>
                    <h3>Wypełnij domyślny adres odbioru kotów z twoich ogłoszeń</h3>
                    <p>
                        Przy dodawaniu ogłoszenia, będziesz mógł wpisać inny adres.
                        <br>
                        W trosce o Twoje bezpieczeństwo nie musisz podawać ulicy i numeru domu - przekażesz je sam po
                        kontakcie z ogłoszeniobiorcą.
                    </p>
                </header>
                <div class="login_form_tile">
                    <label for="DefaultAdvertisementPickupAddressCountry">Kraj:</label>
                    <InputSelect id="DefaultAdvertisementPickupAddressCountry"
                                 @bind-Value="_registerDto.DefaultAdvertisementPickupAddressCountry" required>
                        <option value="">-- Wybierz kraj --</option>
                        <option value="PL">Polska</option>
                    </InputSelect>
                    <div class="login_form_errors">
                        @if (_defaultAdvertisementPickupAddressCountryIsInvalid)
                        {
                            foreach (string error in _defaultAdvertisementPickupAddressCountryErrors)
                            {
                                <div class="input_error">@error</div>
                            }
                        }
                    </div>
                </div>
                <div class="login_form_tile">
                    <label for="DefaultAdvertisementPickupAddressState">Województwo:</label>
                    <InputSelect id="DefaultAdvertisementPickupAddressState"
                                 @bind-Value="_registerDto.DefaultAdvertisementPickupAddressState" required>
                        <option value="">-- Wybierz województwo --</option>
                        <option value="Dolnośląskie">Dolnośląskie</option>
                        <option value="Kujawsko-pomorskie">Kujawsko-pomorskie</option>
                        <option value="Lubelskie">Lubelskie</option>
                        <option value="Lubuskie">Lubuskie</option>
                        <option value="Łódzkie">Łódzkie</option>
                        <option value="Małopolskie">Małopolskie</option>
                        <option value="Mazowieckie">Mazowieckie</option>
                        <option value="Opolskie">Opolskie</option>
                        <option value="Podkarpackie">Podkarpackie</option>
                        <option value="Podlaskie">Podlaskie</option>
                        <option value="Pomorskie">Pomorskie</option>
                        <option value="Śląskie">Śląskie</option>
                        <option value="Świętokrzyskie">Świętokrzyskie</option>
                        <option value="Warmińsko-mazurskie">Warmińsko-mazurskie</option>
                        <option value="Wielkopolskie">Wielkopolskie</option>
                        <option value="Zachodniopomorskie">Zachodniopomorskie</option>
                    </InputSelect>
                    <div class="login_form_errors">
                        @if (_defaultAdvertisementPickupAddressStateIsInvalid)
                        {
                            foreach (string error in _defaultAdvertisementPickupAddressStateErrors)
                            {
                                <div class="input_error">@error</div>
                            }
                        }
                    </div>
                </div>
                <div class="login_form_tile">
                    <label for="DefaultAdvertisementPickupAddressZipCode">Kod pocztowy:</label>
                    <InputText id="DefaultAdvertisementPickupAddressZipCode" type="text" @bind-Value="_registerDto.DefaultAdvertisementPickupAddressZipCode" required/>
                    <div class="login_form_errors">
                        @if (_defaultAdvertisementPickupAddressZipCodeIsInvalid)
                        {
                            foreach (string error in _defaultAdvertisementPickupAddressZipCodeErrors)
                            {
                                <div class="input_error">@error</div>
                            }
                        }
                    </div>
                </div>
                <div class="login_form_tile">
                    <label for="DefaultAdvertisementPickupAddressCity">Miasto:</label>
                    <InputText id="DefaultAdvertisementPickupAddressCity" type="text" @bind-Value="_registerDto.DefaultAdvertisementPickupAddressCity" required/>
                    <div class="login_form_errors">
                        @if (_defaultAdvertisementPickupAddressCityIsInvalid)
                        {
                            foreach (string error in _defaultAdvertisementPickupAddressCityErrors)
                            {
                                <div class="input_error">@error</div>
                            }
                        }
                    </div>
                </div>
                <div class="login_form_tile">
                    <label for="DefaultAdvertisementPickupAddressStreet">Ulica:</label>
                    <InputText id="DefaultAdvertisementPickupAddressStreet" type="text" @bind-Value="_registerDto.DefaultAdvertisementPickupAddressStreet"/>
                    <div class="login_form_errors">
                        @if (_defaultAdvertisementPickupAddressStreetIsInvalid)
                        {
                            foreach (string error in _defaultAdvertisementPickupAddressStreetErrors)
                            {
                                <div class="input_error">@error</div>
                            }
                        }
                    </div>
                </div>
                <div class="login_form_tile">
                    <label for="DefaultAdvertisementPickupAddressBuildingNumber">Numer budynku:</label>
                    <InputText id="DefaultAdvertisementPickupAddressBuildingNumber" type="text" @bind-Value="_registerDto.DefaultAdvertisementPickupAddressBuildingNumber"/>
                    <div class="login_form_errors">
                        @if (_defaultAdvertisementPickupAddressBuildingNumberIsInvalid)
                        {
                            foreach (string error in _defaultAdvertisementPickupAddressBuildingNumberErrors)
                            {
                                <div class="input_error">@error</div>
                            }
                        }
                    </div>
                </div>
                @if (_everyRegisterErrorList.Count > 0)
                {
                    <div class="validation_summary">
                        @foreach (var error in _everyRegisterErrorList)
                        {
                            <div class="input_error">
                                @error
                            </div>
                        }
                    </div>
                }
                <div class="login_form_tile_buttons">
                    <button class="default_btn btn_green" type="submit" disabled="@_isProcessing">
                        @if (_isProcessing)
                        {
                            <span>Rejestracja...</span>
                        }
                        else
                        {
                            <span>Zatwierdź rejestrację konta</span>
                        }
                    </button>
                    <a href="/login" class="default_btn">Zakładałeś już konto? Zaloguj się</a>
                </div>
            </EditForm>
        </section>
    }

    <aside class="register_photo">
    </aside>
</div>

@code{
    private readonly RegisterDto _registerDto = new();
    private bool _isProcessing;
    private bool _registrationSuccess;
    private Link _createPersonLink = null!;
    private string? _errorMessage;

    private ICollection<string> _everyRegisterErrorList = [];
    private bool _nicknameIsInvalid;
    private ICollection<string> _nicknameErrors = [];
    private bool _emailIsInvalid;
    private ICollection<string> _emailErrors = [];
    private bool _phoneNumberIsInvalid;
    private ICollection<string> _phoneNumberErrors = [];
    private bool _passwordIsInvalid;
    private ICollection<string> _passwordErrors = [];
    private bool _defaultAdvertisementPickupAddressCountryIsInvalid;
    private ICollection<string> _defaultAdvertisementPickupAddressCountryErrors = [];
    private bool _defaultAdvertisementPickupAddressStateIsInvalid;
    private ICollection<string> _defaultAdvertisementPickupAddressStateErrors = [];
    private bool _defaultAdvertisementPickupAddressZipCodeIsInvalid;
    private ICollection<string> _defaultAdvertisementPickupAddressZipCodeErrors = [];
    private bool _defaultAdvertisementPickupAddressCityIsInvalid;
    private ICollection<string> _defaultAdvertisementPickupAddressCityErrors = [];
    private bool _defaultAdvertisementPickupAddressStreetIsInvalid;
    private ICollection<string> _defaultAdvertisementPickupAddressStreetErrors = [];
    private bool _defaultAdvertisementPickupAddressBuildingNumberIsInvalid;
    private ICollection<string> _defaultAdvertisementPickupAddressBuildingNumberErrors = [];
    private bool _defaultAdvertisementContactInfoEmailIsInvalid;
    private ICollection<string> _defaultAdvertisementContactInfoEmailErrors = [];
    private bool _defaultAdvertisementContactInfoPhoneNumberIsInvalid;
    private ICollection<string> _defaultAdvertisementContactInfoPhoneNumberErrors = [];

    protected override void OnInitialized()
    {
        Link? createPersonLink = ApiNavigation.Response?.Links.FirstOrDefault(x => x.Rel == EndpointRels.Person.CreatePersonRel);
        if (createPersonLink is null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        _createPersonLink = createPersonLink;
    }

    private async Task HandleRegister()
    {
        _isProcessing = true;
        _errorMessage = null;

        // Resetowanie wszystkich flag błędów i list z błędami
        _nicknameIsInvalid = false;
        _emailIsInvalid = false;
        _phoneNumberIsInvalid = false;
        _passwordIsInvalid = false;
        _defaultAdvertisementPickupAddressCountryIsInvalid = false;
        _defaultAdvertisementPickupAddressStateIsInvalid = false;
        _defaultAdvertisementPickupAddressZipCodeIsInvalid = false;
        _defaultAdvertisementPickupAddressCityIsInvalid = false;
        _defaultAdvertisementPickupAddressStreetIsInvalid = false;
        _defaultAdvertisementPickupAddressBuildingNumberIsInvalid = false;
        _defaultAdvertisementContactInfoEmailIsInvalid = false;
        _defaultAdvertisementContactInfoPhoneNumberIsInvalid = false;

        _nicknameErrors = [];
        _emailErrors = [];
        _phoneNumberErrors = [];
        _passwordErrors = [];
        _defaultAdvertisementPickupAddressCountryErrors = [];
        _defaultAdvertisementPickupAddressStateErrors = [];
        _defaultAdvertisementPickupAddressZipCodeErrors = [];
        _defaultAdvertisementPickupAddressCityErrors = [];
        _defaultAdvertisementPickupAddressStreetErrors = [];
        _defaultAdvertisementPickupAddressBuildingNumberErrors = [];
        _defaultAdvertisementContactInfoEmailErrors = [];
        _defaultAdvertisementContactInfoPhoneNumberErrors = [];
        _everyRegisterErrorList = [];

        // Validate passwords match
        if (_registerDto.Password != _registerDto.ConfirmPassword)
        {
            _errorMessage = "Hasła nie pasują do siebie";
            _isProcessing = false;
            return;
        }

        try
        {
            CreatePersonRequest registerRequest = new(
                Nickname: _registerDto.Nickname,
                Email: _registerDto.Email,
                PhoneNumber: _registerDto.PhoneNumber,
                Password: _registerDto.Password,
                DefaultAdvertisementPickupAddressCountry: _registerDto.DefaultAdvertisementPickupAddressCountry,
                DefaultAdvertisementPickupAddressState: _registerDto.DefaultAdvertisementPickupAddressState,
                DefaultAdvertisementPickupAddressZipCode: _registerDto.DefaultAdvertisementPickupAddressZipCode,
                DefaultAdvertisementPickupAddressCity: _registerDto.DefaultAdvertisementPickupAddressCity,
                DefaultAdvertisementPickupAddressStreet: _registerDto.DefaultAdvertisementPickupAddressStreet,
                DefaultAdvertisementPickupAddressBuildingNumber: _registerDto.DefaultAdvertisementPickupAddressBuildingNumber,
                DefaultAdvertisementContactInfoEmail: _registerDto.DefaultAdvertisementContactInfoEmail,
                DefaultAdvertisementContactInfoPhoneNumber: _registerDto.DefaultAdvertisementContactInfoPhoneNumber
            );

            Result<PersonHateoasResponse?> createPersonResult =
                await ApiClient.PostWithResultAsync<CreatePersonRequest, PersonHateoasResponse>(_createPersonLink.Href, registerRequest);

            if (createPersonResult.IsSuccess)
            {
                _registrationSuccess = true;
                return;
            }

            if (createPersonResult.IsInvalid())
            {
                // Funkcja pomocnicza zwracająca krotkę zamiast używania parametrów ref
                (bool isInvalid, ICollection<string> errors) ProcessFieldErrors(string propertyName)
                {
                    var fieldErrors = createPersonResult.ExtractErrorMessagesForProperty(propertyName);
                    var hasErrors = fieldErrors.Count > 0;
                    return (hasErrors, fieldErrors);
                }

                // Walidacja danych osobowych
                (_nicknameIsInvalid, _nicknameErrors) = ProcessFieldErrors(nameof(CreatePersonRequest.Nickname));
                (_emailIsInvalid, _emailErrors) = ProcessFieldErrors(nameof(CreatePersonRequest.Email));
                (_phoneNumberIsInvalid, _phoneNumberErrors) = ProcessFieldErrors(nameof(CreatePersonRequest.PhoneNumber));
                (_passwordIsInvalid, _passwordErrors) = ProcessFieldErrors(nameof(CreatePersonRequest.Password));

                // Walidacja adresu odbioru
                (_defaultAdvertisementPickupAddressCountryIsInvalid, _defaultAdvertisementPickupAddressCountryErrors) =
                    ProcessFieldErrors(nameof(CreatePersonRequest.DefaultAdvertisementPickupAddressCountry));
                (_defaultAdvertisementPickupAddressStateIsInvalid, _defaultAdvertisementPickupAddressStateErrors) =
                    ProcessFieldErrors(nameof(CreatePersonRequest.DefaultAdvertisementPickupAddressState));
                (_defaultAdvertisementPickupAddressZipCodeIsInvalid, _defaultAdvertisementPickupAddressZipCodeErrors) =
                    ProcessFieldErrors(nameof(CreatePersonRequest.DefaultAdvertisementPickupAddressZipCode));
                (_defaultAdvertisementPickupAddressCityIsInvalid, _defaultAdvertisementPickupAddressCityErrors) =
                    ProcessFieldErrors(nameof(CreatePersonRequest.DefaultAdvertisementPickupAddressCity));
                (_defaultAdvertisementPickupAddressStreetIsInvalid, _defaultAdvertisementPickupAddressStreetErrors) =
                    ProcessFieldErrors(nameof(CreatePersonRequest.DefaultAdvertisementPickupAddressStreet));
                (_defaultAdvertisementPickupAddressBuildingNumberIsInvalid, _defaultAdvertisementPickupAddressBuildingNumberErrors) =
                    ProcessFieldErrors(nameof(CreatePersonRequest.DefaultAdvertisementPickupAddressBuildingNumber));

                // Walidacja informacji kontaktowych
                (_defaultAdvertisementContactInfoEmailIsInvalid, _defaultAdvertisementContactInfoEmailErrors) =
                    ProcessFieldErrors(nameof(CreatePersonRequest.DefaultAdvertisementContactInfoEmail));
                (_defaultAdvertisementContactInfoPhoneNumberIsInvalid, _defaultAdvertisementContactInfoPhoneNumberErrors) =
                    ProcessFieldErrors(nameof(CreatePersonRequest.DefaultAdvertisementContactInfoPhoneNumber));

                // Zbieranie wszystkich błędów do jednej listy
                _everyRegisterErrorList = [];
                foreach (var errorList in new[]
                         {
                             _nicknameErrors, _emailErrors, _phoneNumberErrors, _passwordErrors,
                             _defaultAdvertisementPickupAddressCountryErrors, _defaultAdvertisementPickupAddressStateErrors,
                             _defaultAdvertisementPickupAddressZipCodeErrors, _defaultAdvertisementPickupAddressCityErrors,
                             _defaultAdvertisementPickupAddressStreetErrors, _defaultAdvertisementPickupAddressBuildingNumberErrors,
                             _defaultAdvertisementContactInfoEmailErrors, _defaultAdvertisementContactInfoPhoneNumberErrors
                         })
                {
                    foreach (var error in errorList)
                    {
                        _everyRegisterErrorList.Add(error);
                    }
                }
            }
        }
        catch (HttpRequestException ex)
        {
            _errorMessage = ex.StatusCode switch
            {
                // Handle specific error cases
                System.Net.HttpStatusCode.BadRequest => "Podane dane są nieprawidłowe. Sprawdź wszystkie pola i spróbuj ponownie.",
                System.Net.HttpStatusCode.Conflict => "Użytkownik o podanym adresie email już istnieje. Spróbuj zalogować się lub skorzystaj z opcji resetowania hasła.",
                _ => "Wystąpił błąd podczas rejestracji. Spróbuj ponownie później."
            };
        }
        catch (Exception)
        {
            _errorMessage = "Wystąpił nieoczekiwany błąd. Spróbuj ponownie później.";
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }

    private class RegisterDto
    {
        public string Nickname { get; set; } = "";
        public string PhoneNumber { get; set; } = "";
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
        public string ConfirmPassword { get; set; } = "";
        public string DefaultAdvertisementPickupAddressCountry { get; set; } = "";
        public string? DefaultAdvertisementPickupAddressState { get; set; } = "";
        public string DefaultAdvertisementPickupAddressZipCode { get; set; } = "";
        public string DefaultAdvertisementPickupAddressCity { get; set; } = "";
        public string? DefaultAdvertisementPickupAddressStreet { get; set; } = "";
        public string? DefaultAdvertisementPickupAddressBuildingNumber { get; set; } = "";
        public string DefaultAdvertisementContactInfoEmail { get; set; } = "";
        public string DefaultAdvertisementContactInfoPhoneNumber { get; set; } = "";
    }

}