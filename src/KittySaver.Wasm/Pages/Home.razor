@page "/"
@using KittySaver.Shared.Hateoas
@using KittySaver.Shared.Pagination
@using KittySaver.Shared.Responses
@using KittySaver.Wasm.Shared.Components
@using KittySaver.Wasm.Shared.HttpClients
@inherits KittySaver.Wasm.Shared.Components.ApiAwareComponentBase
@inject IApiClient MainApiClient

<PageTitle>Uratujkota.pl - Ogłoszenia - Bo życie kotków jest priorytetem - Portal adopcyjny dla potrzebujących kotów.</PageTitle>
<div class="index_grid">
    <aside class="index_aside">
        <header>
            <h2>Filtrowanie ogłoszeń</h2>
        </header>
        <div class="filtering_tile">
            <label for="filtering_city">Miasto</label>
            <input type="text" id="filtering_city" class="filtering_input" @bind="City" @bind:event="oninput">
        </div>
        <div class="filtering_tile">
            <label for="filtering_state">Województwo</label>
            <select type="text" id="filtering_state" class="filtering_input" @bind="State">
                <option value="">Wszystkie</option>
                <option value="Dolnośląskie">Dolnośląskie</option>
                <option value="Kujawsko-Pomorskie">Kujawsko-Pomorskie</option>
                <option value="Lubelskie">Lubelskie</option>
                <option value="Lubuskie">Lubuskie</option>
                <option value="Łódzkie">Łódzkie</option>
                <option value="Małopolskie">Małopolskie</option>
                <option value="Mazowieckie">Mazowieckie</option>
                <option value="Opolskie">Opolskie</option>
                <option value="Podkarpackie">Podkarpackie</option>
                <option value="Podlaskie">Podlaskie</option>
                <option value="Pomorskie">Pomorskie</option>
                <option value="Śląskie">Śląskie</option>
                <option value="Świętokrzyskie">Świętokrzyskie</option>
                <option value="Warmińsko-Mazurskie">Warmińsko-Mazurskie</option>
                <option value="Wielkopolskie">Wielkopolskie</option>
                <option value="Zachodniopomorskie">Zachodniopomorskie</option>
            </select>
        </div>
        <div class="filtering_tile">
            <label for="filtering_zipcode">Kod pocztowy</label>
            <input type="text" id="filtering_zipcode" class="filtering_input" @bind="ZipCode" @bind:event="oninput">
        </div>
        <button @onclick="ApplyFilters">Zatwierdź filtry</button>
    </aside>

    @if (_advertisements == null)
    {
        <p>Ładujemy ogłoszenia ze słodkimi kotkami...</p>
    }
    else
    {
        <div class="advertisement_grid">
            <header>
                <h1>
                    Uratuj kota - ogłoszenia adopcyjne
                </h1>
                <p>Kochasz koty? To tak jak my. Adoptuj i sterylizuj - przerwij łańcuch bezdomności.</p>
            </header>
            @foreach (AdvertisementResponse ad in _advertisements.Items)
            {
                <a @onclick="@(() => NavigateToAdvertisement(ad))" @onclick:preventDefault href="/advertisement/@ad.Id" class="advertisement_tile">
                    <div class="advertisement_tile_img_wrapper">
                        <img src="@ad.Links.FirstOrDefault(x => x.Rel == EndpointRels.Advertisement.GetAdvertisementThumbnailRel)?.Href" class="advertisement_tile_img" alt="uratujkota.pl - @ad.Title">
                    </div>
                    <div class="advertisement_tile_content">
                        <strong>@ad.Title</strong>
                        <p>@ad.PickupAddress.City<br>@ad.PickupAddress.State<br>@ad.PickupAddress.ZipCode</p>
                    </div>
                </a>
            }
        </div>
    }
</div>

@code {
    [Inject] 
    private IAdvertisementStateService AdvertisementState { get; set; } = null!;
    
    [Inject] 
    private NavigationManager Navigation { get; set; } = null!;
    
    private PagedList<AdvertisementResponse>? _advertisements;
    private string? City { get; set; }
    private string? State { get; set; }
    private string? ZipCode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadAdvertisements();
    }

    private async Task LoadAdvertisements()
    {
        Link? getAdvertisementsLink = ApiNavigation.GetLink(EndpointRels.Advertisement.GetPublicAdvertisementsRel);
        if (getAdvertisementsLink is not null)
        {
            string searchTerms = BuildSearchTerms();
            string url = getAdvertisementsLink.Href;
            
            if (!string.IsNullOrEmpty(searchTerms))
            {
                url = $"{url}?searchTerm={searchTerms}";
            }

            _advertisements = await MainApiClient.GetAsync<PagedList<AdvertisementResponse>>(url);
        }
    }

    private string BuildSearchTerms()
    {
        List<string> terms = [];

        if (!string.IsNullOrWhiteSpace(City))
        {
            terms.Add($"pickupaddresscity-in-{City.ToLower()}");
        }

        if (!string.IsNullOrWhiteSpace(State))
        {
            terms.Add($"pickupaddressstate-in-{State.ToLower()}");
        }

        if (!string.IsNullOrWhiteSpace(ZipCode))
        {
            terms.Add($"pickupaddresszipcode-in-{ZipCode.ToLower()}");
        }

        return string.Join(",", terms);
    }

    private async Task ApplyFilters()
    {
        await LoadAdvertisements();
    }
    
    private void NavigateToAdvertisement(AdvertisementResponse ad)
    {
        Link? link = ad.Links.FirstOrDefault(x => x.Rel == EndpointRels.SelfRel);
        if (link is null)
        {
            return;
        }
        AdvertisementState.SetSelectedAdvertisementLink(ad.Id, link);
        Navigation.NavigateTo($"/advertisement/{ad.Id}");
    }
}