@page "/reset-password"
@using System.ComponentModel.DataAnnotations
@using KittySaver.Shared.Requests
@using KittySaver.Wasm.Shared.HttpClients
@inherits KittySaver.Wasm.Shared.Components.ApiAwareComponentBase
@inject IApiClient ApiClient
@inject NavigationManager NavigationManager

<PageTitle>Uratujkota.pl - Reset hasła</PageTitle>

<div class="subpage_grid">
    <aside class="subpage_sidebar"></aside>
    <article class="subpage_content">
        <header class="subpage_header">
            <h1>Reset hasła</h1>
        </header>
        
        <section class="subpage_main_info">
            <div class="form-container">
                @if (_stage == ResetStage.RequestForm)
                {
                    <div class="form-content">
                        <p>
                            Wpisz adres email powiązany z Twoim kontem. Wyślemy na niego instrukcje resetowania hasła.
                        </p>
                        
                        @if (_error != null)
                        {
                            <div class="error-message">
                                <p>@_error</p>
                            </div>
                        }
                        
                        <EditForm Model="_requestModel" OnValidSubmit="HandleRequestSubmit" class="reset-form">
                            <DataAnnotationsValidator />
                            
                            <div class="form-group">
                                <label for="email">Adres email:</label>
                                <InputText id="email" @bind-Value="_requestModel.Email" class="form-control" />
                                <ValidationMessage For="@(() => _requestModel.Email)" />
                            </div>
                            
                            <div class="form-actions">
                                <button type="submit" class="default_btn btn_green" disabled="@_isProcessing">
                                    @if (_isProcessing)
                                    {
                                        <span>Wysyłanie...</span>
                                    }
                                    else
                                    {
                                        <span>Wyślij instrukcje resetowania</span>
                                    }
                                </button>
                                <a href="/login" class="default_btn">Wróć do logowania</a>
                            </div>
                        </EditForm>
                    </div>
                }
                else if (_stage == ResetStage.ResetForm)
                {
                    <div class="form-content">
                        <p>
                            Ustaw nowe hasło dla swojego konta.
                        </p>
                        
                        @if (_error != null)
                        {
                            <div class="error-message">
                                <p>@_error</p>
                            </div>
                        }
                        
                        <EditForm Model="_resetModel" OnValidSubmit="HandleResetSubmit" class="reset-form">
                            <DataAnnotationsValidator />
                            
                            <div class="form-group">
                                <label for="password">Nowe hasło:</label>
                                <InputText id="password" type="password" @bind-Value="_resetModel.Password" class="form-control" />
                                <ValidationMessage For="@(() => _resetModel.Password)" />
                                <div class="password-requirements">
                                    <p>Hasło musi zawierać:</p>
                                    <ul>
                                        <li>Minimum 8 znaków</li>
                                        <li>Przynajmniej jedną wielką literę</li>
                                        <li>Przynajmniej jedną małą literę</li>
                                        <li>Przynajmniej jedną cyfrę</li>
                                    </ul>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label for="confirmPassword">Potwierdź hasło:</label>
                                <InputText id="confirmPassword" type="password" @bind-Value="_resetModel.ConfirmPassword" class="form-control" />
                                <ValidationMessage For="@(() => _resetModel.ConfirmPassword)" />
                            </div>
                            
                            <div class="form-actions">
                                <button type="submit" class="default_btn btn_green" disabled="@_isProcessing">
                                    @if (_isProcessing)
                                    {
                                        <span>Resetowanie hasła...</span>
                                    }
                                    else
                                    {
                                        <span>Zresetuj hasło</span>
                                    }
                                </button>
                                <a href="/login" class="default_btn">Anuluj</a>
                            </div>
                        </EditForm>
                    </div>
                }
                else if (_stage == ResetStage.RequestSuccess)
                {
                    <div class="confirmation-status success">
                        <div class="status-icon success">✓</div>
                        <h2>Link do resetowania hasła wysłany!</h2>
                        <p>Jeśli podany adres email istnieje w naszej bazie, wyślemy na niego instrukcje resetowania hasła.</p>
                        <p>Sprawdź swoją skrzynkę pocztową i kliknij link w wiadomości, aby zresetować hasło.</p>
                        <div class="action-buttons">
                            <a href="/login" class="default_btn btn_green">Przejdź do logowania</a>
                        </div>
                    </div>
                }
                else if (_stage == ResetStage.ResetSuccess)
                {
                    <div class="confirmation-status success">
                        <div class="status-icon success">✓</div>
                        <h2>Hasło zresetowane!</h2>
                        <p>Twoje hasło zostało pomyślnie zresetowane. Możesz teraz zalogować się za pomocą nowego hasła.</p>
                        <div class="action-buttons">
                            <a href="/login?passwordReset=true" class="default_btn btn_green">Przejdź do logowania</a>
                        </div>
                    </div>
                }
            </div>
        </section>
    </article>
    <aside class="subpage_sidebar"></aside>
</div>

@code {
    private enum ResetStage
    {
        RequestForm,
        RequestSuccess,
        ResetForm,
        ResetSuccess
    }
    
    private class PasswordRequestModel
    {
        [Required(ErrorMessage = "Adres email jest wymagany")]
        [EmailAddress(ErrorMessage = "Podaj prawidłowy adres email")]
        public string Email { get; set; } = "";
    }
    
    private class PasswordResetModel
    {
        [Required(ErrorMessage = "Nowe hasło jest wymagane")]
        [StringLength(100, ErrorMessage = "Hasło musi mieć co najmniej {2} znaków", MinimumLength = 8)]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).+$", 
            ErrorMessage = "Hasło musi zawierać co najmniej jedną wielką literę, jedną małą literę i jedną cyfrę")]
        public string Password { get; set; } = "";
        
        [Required(ErrorMessage = "Potwierdzenie hasła jest wymagane")]
        [Compare("Password", ErrorMessage = "Hasła nie są takie same")]
        public string ConfirmPassword { get; set; } = "";
        
        // Hidden values
        public string Email { get; set; } = "";
        public string Token { get; set; } = "";
    }
    
    private readonly PasswordRequestModel _requestModel = new();
    private readonly PasswordResetModel _resetModel = new();
    private ResetStage _stage = ResetStage.RequestForm;
    private bool _isProcessing;
    private string? _error;
    
    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryString = System.Web.HttpUtility.ParseQueryString(uri.Query);
    
        // Sprawdź, czy mamy parametry tokenu resetowania w URL
        var email = queryString["email"];
        var token = queryString["token"];
    
        if (!string.IsNullOrEmpty(email) && !string.IsNullOrEmpty(token))
        {
            _resetModel.Email = email;
            _resetModel.Token = token;
            _stage = ResetStage.ResetForm;
        }
    
        base.OnInitialized();
    }
    
    private async Task HandleRequestSubmit()
    {
        _isProcessing = true;
        _error = null;
        
        try
        {
            // Call API to request password reset
            await ApiClient.PostAsync<ForgotPasswordRequest, object>(
                "https://localhost:44371/api/v1/application-users/forgot-password",
                new ForgotPasswordRequest(_requestModel.Email));
            
            // If we got here, the request was successful
            _stage = ResetStage.RequestSuccess;
        }
        catch (HttpRequestException ex)
        {
            if (ex.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                _error = "Nieprawidłowy adres email lub konto nie istnieje.";
            }
            else
            {
                _error = "Wystąpił błąd podczas wysyłania instrukcji resetowania hasła. Spróbuj ponownie później.";
            }
        }
        catch (Exception)
        {
            _error = "Wystąpił nieoczekiwany błąd. Spróbuj ponownie później.";
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }
    
    private async Task HandleResetSubmit()
    {
        _isProcessing = true;
        _error = null;
        
        try
        {
            // Call API to reset password
            await ApiClient.PostAsync<ResetPasswordRequest, object>(
                "https://localhost:44371/api/v1/application-users/reset-password",
                new ResetPasswordRequest(_resetModel.Email, _resetModel.Token, _resetModel.Password));
            
            // If we got here, the reset was successful
            _stage = ResetStage.ResetSuccess;
        }
        catch (HttpRequestException ex)
        {
            if (ex.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                _error = "Nieprawidłowy token resetowania hasła lub wygasł. Spróbuj ponownie wygenerować link do resetowania hasła.";
            }
            else if (ex.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                _error = "Nie znaleziono użytkownika o podanym adresie email.";
            }
            else
            {
                _error = "Wystąpił błąd podczas resetowania hasła. Spróbuj ponownie później.";
            }
        }
        catch (Exception)
        {
            _error = "Wystąpił nieoczekiwany błąd. Spróbuj ponownie później.";
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }
}