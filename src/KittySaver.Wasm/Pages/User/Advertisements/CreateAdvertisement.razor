@page "/user/advertisements/create"
@attribute [Authorize]
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Headers
@using KittySaver.Shared.Hateoas
@using KittySaver.Shared.Requests
@using KittySaver.Shared.Responses
@using KittySaver.Shared.TypedIds
@using KittySaver.Wasm.Shared.HttpClients
@using KittySaver.Wasm.Shared.Validation
@using Microsoft.AspNetCore.Authorization
@using KittySaver.Wasm.Shared.Components
@inherits KittySaver.Wasm.Shared.Components.ApiAwareComponentBase
@inject IApiClient MainApiClient
@inject NavigationManager NavigationManager
@inject IFileValidationService FileValidationService

<PageTitle>Uratujkota.pl - Dodaj nowe ogłoszenie</PageTitle>

<div class="subpage_grid">
    <aside class="subpage_sidebar"></aside>
    <article class="subpage_content">
        <header class="subpage_header">
            <h1>Dodaj nowe ogłoszenie</h1>
            <div class="subpage_header_action">
                <a href="/user/advertisements" class="default_btn btn_red">Anuluj</a>
            </div>
        </header>

        <!-- Step indicator -->
        <div class="listing_wizard_steps">
            <div class="step @(_currentStep == 1 ? "active" : "")">1. Wybór kotów</div>
            <div class="step @(_currentStep == 2 ? "active" : "")">2. Informacje ogłoszenia</div>
            <div class="step @(_currentStep == 3 ? "active" : "")">3. Miniaturka ogłoszenia</div>
            <div class="step @(_currentStep == 4 ? "active" : "")">4. Podgląd i publikacja</div>
        </div>

        @if (_currentStep == 1)
        {
            <!-- Step 1: Cat Selection -->
            <section class="subpage_main_info">
                <div class="subpage_description listing_element">
                    <p>
                        <strong>Tytuł ogłoszenia</strong> będzie automatycznie stworzony z imion kotów w ogłoszeniu.
                    </p>
                </div>
                <div class="subpage_description listing_element listing_element_warning">
                    <p>
                        <strong>Ważne:</strong> Wszystkie koty dodane do jednego ogłoszenia muszą być adoptowane razem.
                        Jeśli koty mogą być adoptowane oddzielnie, utwórz osobne ogłoszenie dla każdego kota.
                    </p>

                </div>
                <div class="subpage_description listing_element">
                    @if (_selectedCats.Count <= 0)
                    {
                        <p>
                            <strong>Uwaga:</strong> Musisz wybrać przynajmniej jednego kota.
                        </p>
                    }
                    else
                    {
                        <p>
                            <strong>Wybrano kotów: @_selectedCats.Count</strong>
                        </p>
                    }
                </div>
                @if (_selectedCats.Count > 3)
                {
                    <div class="subpage_description listing_element listing_element_warning">
                        <p>
                            Pamiętaj, że ogłoszenie z wieloma kotami może być trudniejsze do zrealizowania.
                        </p>
                    </div>
                }

                <div class="cat_selection_container">
                    <!-- Two panel layout -->
                    <div class="cat_panels">
                        <!-- Available cats -->
                        <div class="cat_panel">
                            <h3>Dostępne koty</h3>
                            @if (_availableCats.Count == 0)
                            {
                                <div class="empty_selection">
                                    <p>Nie masz dostępnych kotów do dodania do ogłoszenia.</p>
                                    <a href="/user/cats/create" class="default_btn btn_blue">Dodaj nowego kota</a>
                                </div>
                            }
                            else
                            {
                                <div class="cat_selection_grid">
                                    @foreach (CatResponse cat in _availableCats)
                                    {
                                        <div class="cat_selection_grid_tile" @onclick="() => ToggleSelectCat(cat)">
                                            <img src="@GetCatThumbnail(cat)" alt="@cat.Name">
                                            <div class="cat_selection_grid_tile_info">
                                                <strong>@cat.Name</strong>
                                                <div class="cat_selection_grid_tile_select_indicator"></div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>

                        <!-- Selected cats -->
                        <div class="cat_panel">
                            <h3>Wybrane do tego ogłoszenia</h3>
                            @if (_selectedCats.Count == 0)
                            {
                                <div class="empty_selection">
                                    <p>Kliknij na kota po lewej stronie, aby dodać go do ogłoszenia.</p>
                                </div>
                            }
                            else
                            {
                                <div class="cat_selection_grid">
                                    @foreach (CatResponse cat in _selectedCats)
                                    {
                                        <div class="cat_selection_grid_tile selected" @onclick="() => ToggleSelectCat(cat)">
                                            <img src="@GetCatThumbnail(cat)" alt="@cat.Name">
                                            <div class="cat_selection_grid_tile_info">
                                                <strong>@cat.Name</strong>
                                                <div class="cat_selection_grid_tile_remove_indicator"></div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <div class="login_form_tile_buttons">
                    <button type="button" class="default_btn btn_green @(_selectedCats.Count == 0 ? "disabled" : "")"
                            @onclick="() => GoToStep(2)" disabled="@(_selectedCats.Count == 0)">
                        Dalej: Informacje ogłoszenia
                    </button>
                </div>
            </section>
        }
        else if (_currentStep == 2)
        {
            <!-- Step 2: Advertisement Details -->
            <section class="subpage_main_info">
                <div class="subpage_description listing_element">
                    <h3>Informacje o ogłoszeniu</h3>
                    <p>
                        Wypełnij dane kontaktowe i miejsce odbioru kotów.
                    </p>
                </div>

                <!-- Advertisement form -->
                <div class="subpage_form_container">
                    <EditForm Model="_advertisementDto" OnValidSubmit="@(() => GoToStep(3))" class="subpage_form">
                        <DataAnnotationsValidator />

                        @if (_showValidationErrors)
                        {
                            <div class="validation-summary">
                                <ValidationSummary />
                            </div>
                        }

                        <div class="login_form_tile span2">
                            <label for="description">Opis ogłoszenia:</label>
                            <InputTextArea id="description" @bind-Value="_advertisementDto.Description" rows="4"/>
                            <ValidationMessage For="@(() => _advertisementDto.Description)" />
                        </div>

                        <div class="login_form_tile">
                            <label for="contactEmail">Kontaktowy adres email:</label>
                            <InputText id="contactEmail" @bind-Value="_advertisementDto.ContactInfoEmail" />
                            <ValidationMessage For="@(() => _advertisementDto.ContactInfoEmail)" />
                        </div>

                        <div class="login_form_tile">
                            <label for="contactPhone">Kontaktowy numer telefonu:</label>
                            <InputText id="contactPhone" @bind-Value="_advertisementDto.ContactInfoPhoneNumber" />
                            <ValidationMessage For="@(() => _advertisementDto.ContactInfoPhoneNumber)" />
                        </div>

                        <!-- Address fields -->
                        <div class="login_form_tile">
                            <label for="country">Kraj:</label>
                            <InputText id="country" @bind-Value="_advertisementDto.PickupAddressCountry" />
                            <ValidationMessage For="@(() => _advertisementDto.PickupAddressCountry)" />
                        </div>

                        <div class="login_form_tile">
                            <label for="state">Województwo:</label>
                            <InputSelect id="state" @bind-Value="_advertisementDto.PickupAddressState">
                                <option value="">Wybierz województwo</option>
                                <option value="Dolnośląskie">Dolnośląskie</option>
                                <option value="Kujawsko-Pomorskie">Kujawsko-Pomorskie</option>
                                <option value="Lubelskie">Lubelskie</option>
                                <option value="Lubuskie">Lubuskie</option>
                                <option value="Łódzkie">Łódzkie</option>
                                <option value="Małopolskie">Małopolskie</option>
                                <option value="Mazowieckie">Mazowieckie</option>
                                <option value="Opolskie">Opolskie</option>
                                <option value="Podkarpackie">Podkarpackie</option>
                                <option value="Podlaskie">Podlaskie</option>
                                <option value="Pomorskie">Pomorskie</option>
                                <option value="Śląskie">Śląskie</option>
                                <option value="Świętokrzyskie">Świętokrzyskie</option>
                                <option value="Warmińsko-Mazurskie">Warmińsko-Mazurskie</option>
                                <option value="Wielkopolskie">Wielkopolskie</option>
                                <option value="Zachodniopomorskie">Zachodniopomorskie</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => _advertisementDto.PickupAddressState)" />
                        </div>

                        <div class="login_form_tile">
                            <label for="zipCode">Kod pocztowy:</label>
                            <InputText id="zipCode" @bind-Value="_advertisementDto.PickupAddressZipCode" />
                            <ValidationMessage For="@(() => _advertisementDto.PickupAddressZipCode)" />
                        </div>

                        <div class="login_form_tile">
                            <label for="city">Miasto:</label>
                            <InputText id="city" @bind-Value="_advertisementDto.PickupAddressCity" />
                            <ValidationMessage For="@(() => _advertisementDto.PickupAddressCity)" />
                        </div>

                        <div class="login_form_tile">
                            <label for="street">Ulica:</label>
                            <InputText id="street" @bind-Value="_advertisementDto.PickupAddressStreet" />
                            <ValidationMessage For="@(() => _advertisementDto.PickupAddressStreet)" />
                            <small>Opcjonalne - podasz przy osobistym kontakcie z adoptującym</small>
                        </div>

                        <div class="login_form_tile">
                            <label for="buildingNumber">Numer budynku:</label>
                            <InputText id="buildingNumber" @bind-Value="_advertisementDto.PickupAddressBuildingNumber" />
                            <ValidationMessage For="@(() => _advertisementDto.PickupAddressBuildingNumber)" />
                            <small>Opcjonalne - podasz przy osobistym kontakcie z adoptującym</small>
                        </div>

                        <div class="login_form_tile_buttons">
                            <button type="button" class="default_btn" @onclick="() => GoToStep(1)">
                                Wróć
                            </button>
                            <button type="submit" class="default_btn btn_green">
                                Dalej: Wybierz miniaturkę
                            </button>
                        </div>
                    </EditForm>
                </div>
            </section>
        }
        else if (_currentStep == 3)
        {
            <!-- Step 3: Thumbnail Upload -->
            <section class="subpage_main_info">
                <div class="subpage_description listing_element">
                    <h3>Miniaturka ogłoszenia</h3>
                    <p>Dodaj główne zdjęcie dla Twojego ogłoszenia. To zdjęcie będzie widoczne na liście ogłoszeń.</p>
                </div>

                <div class="subpage_description listing_element listing_element_warning">
                    <p>
                        <strong>Ważne:</strong> Miniaturka jest wymagana, aby ogłoszenie było widoczne publicznie.
                        Bez niej ogłoszenie będzie miało status "Brak wymaganej miniaturki".
                    </p>
                </div>

                <div class="subpage_form_container">
                    <div class="subpage_form">
                        <div class="login_form_tile">
                            <label for="thumbnail">Wybierz zdjęcie miniaturki:</label>
                            <InputFile id="thumbnail" OnChange="OnThumbnailSelected" accept=".jpg,.jpeg,.png,.webp" />
                            @if (!string.IsNullOrEmpty(_thumbnailError))
                            {
                                <div class="validation-message">@_thumbnailError</div>
                            }
                        </div>

                        @if (_thumbnailPreviewUrl != null)
                        {
                            <div class="login_form_tile">
                                <label>Podgląd miniaturki:</label>
                                <div class="thumbnail-preview">
                                    <img src="@_thumbnailPreviewUrl" alt="Podgląd miniaturki" style="max-width: 300px; max-height: 300px;" />
                                </div>
                            </div>
                        }

                        <div class="login_form_tile_buttons">
                            <button type="button" class="default_btn" @onclick="() => GoToStep(2)">
                                Wróć
                            </button>
                            <button type="button" class="default_btn btn_green" @onclick="ValidateAndGoToPreview" disabled="@(_thumbnailFileData == null)">
                                Dalej: Podgląd ogłoszenia
                            </button>
                        </div>
                    </div>
                </div>
            </section>
        }
        else if (_currentStep == 4)
        {
            <!-- Step 4: Preview & Submit -->
            <section class="subpage_main_info">
                <div class="subpage_description listing_element">
                    <h3>Podgląd ogłoszenia</h3>
                    <p>Tak będzie wyglądało Twoje ogłoszenie dla potencjalnych adoptujących:</p>
                </div>

                <div class="listing_preview">
                    <!-- Match the structure of the actual advertisement page -->
                    <article class="subpage_content">
                        <header class="subpage_header listing_header">
                            <h1>@string.Join(", ", _selectedCats.Select(c => c.Name))</h1>
                            <p class="listing_element">
                                @_advertisementDto.PickupAddressCity
                                <br>
                                @_advertisementDto.PickupAddressZipCode @(!string.IsNullOrEmpty(_advertisementDto.PickupAddressState) ? $"- {_advertisementDto.PickupAddressState}" : "")
                            </p>
                            <div class="subpage_advertiser listing_element">
                                <strong>Ogłoszeniodawca - @_userName</strong>
                                <!-- Show mock buttons that look like the real ones but are not functional in preview -->
                                <div class="btn btn_active">
                                    <div class="btn_listing_contact_inner">
                                        <svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 122.88 85.57" style="width: 20px; height: 20px;"><title>mail</title><path d="M3.8,0,62.48,47.85,118.65,0ZM0,80.52,41.8,38.61,0,4.53v76ZM46.41,42.37,3.31,85.57h115.9L78,42.37,64.44,53.94h0a3,3,0,0,1-3.78.05L46.41,42.37Zm36.12-3.84,40.35,42.33V4.16L82.53,38.53Z"/></svg>
                                        <span>@_advertisementDto.ContactInfoEmail</span>
                                    </div>
                                </div>
                                <div class="btn btn_active">
                                    <div class="btn_listing_contact_inner">
                                        <svg id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 122.88 122.27" style="width: 20px; height: 20px;"><g><path d="M33.84,50.25c4.13,7.45,8.89,14.6,15.07,21.12c6.2,6.56,13.91,12.53,23.89,17.63c0.74,0.36,1.44,0.36,2.07,0.11 c0.95-0.36,1.92-1.15,2.87-2.1c0.74-0.74,1.66-1.92,2.62-3.21c3.84-5.05,8.59-11.32,15.3-8.18c0.15,0.07,0.26,0.15,0.41,0.21 l22.38,12.87c0.07,0.04,0.15,0.11,0.21,0.15c2.95,2.03,4.17,5.16,4.2,8.71c0,3.61-1.33,7.67-3.28,11.1 c-2.58,4.53-6.38,7.53-10.76,9.51c-4.17,1.92-8.81,2.95-13.27,3.61c-7,1.03-13.56,0.37-20.27-1.69 c-6.56-2.03-13.17-5.38-20.39-9.84l-0.53-0.34c-3.31-2.07-6.89-4.28-10.4-6.89C31.12,93.32,18.03,79.31,9.5,63.89 C2.35,50.95-1.55,36.98,0.58,23.67c1.18-7.3,4.31-13.94,9.77-18.32c4.76-3.84,11.17-5.94,19.47-5.2c0.95,0.07,1.8,0.62,2.25,1.44 l14.35,24.26c2.1,2.72,2.36,5.42,1.21,8.12c-0.95,2.21-2.87,4.25-5.49,6.15c-0.77,0.66-1.69,1.33-2.66,2.03 c-3.21,2.33-6.86,5.02-5.61,8.18L33.84,50.25L33.84,50.25L33.84,50.25z"/></g></svg>
                                        <span>@_advertisementDto.ContactInfoPhoneNumber</span>
                                    </div>
                                </div>
                            </div>
                        </header>
                        <section class="subpage_main_info">
                            @if (_selectedCats.Count > 1)
                            {
                                <div class="subpage_reminder listing_element listing_element_warning">
                                    <strong>Uwaga</strong>
                                    <p>
                                        Prosimy pamiętać, że ogłoszeniodawca chce wydać wszystkie koty z tego ogłoszenia do jednego
                                        domu. Nie ma innej możliwości jak adoptować razem wszystkie koty z tego ogłoszenia.
                                    </p>
                                </div>
                            }
                            <div class="subpage_description listing_element">
                                <strong>Opis ogłoszenia</strong>
                                <p>
                                    @_advertisementDto.Description
                                </p>
                            </div>

                            @if (_thumbnailPreviewUrl != null)
                            {
                                <div class="subpage_description listing_element">
                                    <strong>Miniaturka ogłoszenia</strong>
                                    <div class="thumbnail-preview">
                                        <img src="@_thumbnailPreviewUrl" alt="Miniaturka ogłoszenia" style="max-width: 300px; max-height: 300px;" />
                                    </div>
                                </div>
                            }
                        </section>

                        <!-- Display cats in a grid matching the actual page -->
                        <section class="subpage_cats_grid">
                            @{
                                // Sort cats by additional requirements length as in the actual page
                                List<CatResponse> sortedCats = _selectedCats.OrderByDescending(cat => cat.AdditionalRequirements?.Length).ToList();
                                // Split into two columns
                                IEnumerable<CatResponse> leftColumn = sortedCats.Where((_, index) => index % 2 == 0);
                                IEnumerable<CatResponse> rightColumn = sortedCats.Where((_, index) => index % 2 == 1);
                            }

                            <div class="subpage_cats_grid_column">
                                @foreach (CatResponse cat in leftColumn)
                                {
                                    <CatTileComponent Cat="cat" />
                                }
                            </div>
                            <div class="subpage_cats_grid_column">
                                @foreach (CatResponse cat in rightColumn)
                                {
                                    <CatTileComponent Cat="cat" />
                                }
                            </div>
                        </section>
                    </article>
                </div>

                <div class="login_form_tile_buttons">
                    <button type="button" class="default_btn" @onclick="() => GoToStep(3)">
                        Wróć
                    </button>
                    <button type="button" class="default_btn btn_green" @onclick="HandleSubmit" disabled="@_isProcessing">
                        @if (_isProcessing)
                        {
                            <span>Publikowanie ogłoszenia...</span>
                        }
                        else
                        {
                            <span>Opublikuj ogłoszenie</span>
                        }
                    </button>
                </div>
            </section>
        }
    </article>
    <aside class="subpage_sidebar"></aside>
</div>
@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid? CatId { get; set; }
    
    private int _currentStep = 1;
    private AdvertisementDto _advertisementDto = new();
    private List<CatResponse> _availableCats = [];
    private readonly List<CatResponse> _selectedCats = [];
    private bool _showValidationErrors;
    private string _userName = "";
    private IBrowserFile? _thumbnailFile;
    private string? _thumbnailError;
    private string? _thumbnailPreviewUrl;
    private bool _isProcessing;
    
    // New properties for file handling
    private byte[]? _thumbnailFileData;
    private string? _thumbnailFileName;
    private string? _thumbnailContentType;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadUserData();
        await LoadAvailableCats();
        
        if (CatId.HasValue)
        {
            var catToAdd = _availableCats.FirstOrDefault(c => c.Id == new CatId(CatId.Value));
            if (catToAdd != null)
            {
                ToggleSelectCat(catToAdd);
            }
        }
    }

    private async Task LoadUserData()
    {
        // Get user's default advertisement information to pre-fill form
        Link? personLink = ApiNavigation.GetLink(EndpointRels.Person.GetPersonRel);
        if (personLink is not null)
        {
            PersonResponse? person = await MainApiClient.GetAsync<PersonResponse>(personLink.Href);
            if (person is not null)
            {
                _userName = person.Nickname;
                _advertisementDto = new AdvertisementDto
                {
                    ContactInfoEmail = person.DefaultAdvertisementsContactInfoEmail,
                    ContactInfoPhoneNumber = person.DefaultAdvertisementsContactInfoPhoneNumber,
                    PickupAddressCountry = person.DefaultAdvertisementsPickupAddress.Country,
                    PickupAddressState = person.DefaultAdvertisementsPickupAddress.State,
                    PickupAddressZipCode = person.DefaultAdvertisementsPickupAddress.ZipCode,
                    PickupAddressCity = person.DefaultAdvertisementsPickupAddress.City,
                    PickupAddressStreet = person.DefaultAdvertisementsPickupAddress.Street,
                    PickupAddressBuildingNumber = person.DefaultAdvertisementsPickupAddress.BuildingNumber
                };
                StateHasChanged();
            }
        }
    }

    private async Task LoadAvailableCats()
    {
        // Load cats that are not already in advertisements
        Link? ownerCatsLink = ApiNavigation.GetLink(EndpointRels.Cat.GetCatsRel);
        if (ownerCatsLink is null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        PagedList<CatResponse>? catsPagedList = await MainApiClient.GetAsync<PagedList<CatResponse>>(ownerCatsLink.Href);
        if (catsPagedList?.Items != null)
        {
            // Filter cats that are not already in advertisements
            _availableCats = catsPagedList.Items
                .Where(cat => !cat.IsAssignedToAdvertisement)
                .ToList();
        }
    }

    private void GoToStep(int step)
    {
        // Reset validation errors when moving between steps
        _showValidationErrors = false;

        // For step 1, just allow navigation
        if (step == 1 || ValidateCurrentStep())
        {
            _currentStep = step;
        }
        else
        {
            // If validation fails, show validation errors
            _showValidationErrors = true;
        }
    }

    private bool ValidateCurrentStep()
    {
        // Add validation logic for each step
        return _currentStep switch
        {
            1 =>
                // Validate cat selection
                _selectedCats.Count > 0,
            2 =>
                // For step 2, we let the EditForm handle validation via OnValidSubmit
                // This is a backup validation
                !string.IsNullOrWhiteSpace(_advertisementDto.Description) && !string.IsNullOrWhiteSpace(_advertisementDto.ContactInfoEmail) && !string.IsNullOrWhiteSpace(_advertisementDto.ContactInfoPhoneNumber) && !string.IsNullOrWhiteSpace(_advertisementDto.PickupAddressCountry) && !string.IsNullOrWhiteSpace(_advertisementDto.PickupAddressZipCode) && !string.IsNullOrWhiteSpace(_advertisementDto.PickupAddressCity),
            3 =>
                // Validate thumbnail - now checking the byte array data rather than the file reference
                _thumbnailFileData != null && string.IsNullOrEmpty(_thumbnailError),
            _ => true
        };
    }

    private void ToggleSelectCat(CatResponse cat)
    {
        if (_selectedCats.Contains(cat))
        {
            _selectedCats.Remove(cat);
            _availableCats.Add(cat);
        }
        else
        {
            _selectedCats.Add(cat);
            _availableCats.Remove(cat);
        }
    }

    private static string GetCatThumbnail(CatResponse cat)
    {
        if (!cat.IsThumbnailUploaded)
        {
            return "/imgs/defaultCat.webp";
        }
        Link? thumbnailLink = cat.Links.FirstOrDefault(x => x.Rel == EndpointRels.Cat.GetCatThumbnailRel);
        return thumbnailLink?.Href ?? "/imgs/defaultCat.webp";
    }

    private async Task OnThumbnailSelected(InputFileChangeEventArgs e)
    {
        _thumbnailFile = e.File;
        _thumbnailError = null;

        // Validate file
        ValidationResult? validationResult = FileValidationService.ValidateImageFile(_thumbnailFile);
        if (validationResult is not null)
        {
            _thumbnailError = validationResult.ErrorMessage;
            return;
        }

        // Cache the file data immediately
        try
        {
            // Save file details
            _thumbnailFileName = _thumbnailFile.Name;
            _thumbnailContentType = _thumbnailFile.ContentType;
        
            // Read and cache file data - zwiększamy limit
            await using Stream stream = _thumbnailFile.OpenReadStream(5 * 1024 * 1024); // 5MB
            _thumbnailFileData = new byte[_thumbnailFile.Size];
            await stream.ReadAsync(_thumbnailFileData);

            // Create a preview URL - zwiększamy limit
            IBrowserFile imageFile = await e.File.RequestImageFileAsync("image/jpeg", 300, 300);
            byte[] buffer = new byte[imageFile.Size];
            await using Stream previewStream = imageFile.OpenReadStream(5 * 1024 * 1024); // 5MB
            await previewStream.ReadAsync(buffer);
            string imageDataUrl = $"data:image/jpeg;base64,{Convert.ToBase64String(buffer)}";
            _thumbnailPreviewUrl = imageDataUrl;
        }
        catch (Exception ex)
        {
            _thumbnailError = $"Błąd podczas tworzenia podglądu: {ex.Message}";
        }
    }

    private void ValidateAndGoToPreview()
    {
        if (_thumbnailFileData is null)
        {
            _thumbnailError = "Miniaturka jest wymagana";
            return;
        }

        ValidationResult? validationResult = FileValidationService.ValidateImageFile(_thumbnailFile);
        if (validationResult is not null)
        {
            _thumbnailError = validationResult.ErrorMessage;
            return;
        }

        GoToStep(4);
    }

    private async Task HandleSubmit()
    {
        _isProcessing = true;

        try
        {
            // Step 1: Create the advertisement
            CreateAdvertisementRequest createRequest = new(
                CatsIdsToAssign: _selectedCats.Select(c => c.Id),
                Description: _advertisementDto.Description,
                PickupAddressCountry: _advertisementDto.PickupAddressCountry,
                PickupAddressState: _advertisementDto.PickupAddressState,
                PickupAddressZipCode: _advertisementDto.PickupAddressZipCode,
                PickupAddressCity: _advertisementDto.PickupAddressCity,
                PickupAddressStreet: _advertisementDto.PickupAddressStreet,
                PickupAddressBuildingNumber: _advertisementDto.PickupAddressBuildingNumber,
                ContactInfoEmail: _advertisementDto.ContactInfoEmail,
                ContactInfoPhoneNumber: _advertisementDto.ContactInfoPhoneNumber
            );

            // Get the creation link
            Link? createLink = ApiNavigation.GetLink(EndpointRels.Advertisement.CreateAdvertisementRel);
            if (createLink is not null)
            {
                AdvertisementHateoasResponse? result = await MainApiClient.PostAsync<CreateAdvertisementRequest, AdvertisementHateoasResponse>(
                    createLink.Href, createRequest);

                if (result is not null && _thumbnailFileData is not null && !string.IsNullOrEmpty(_thumbnailFileName))
                {
                    // Step 2: Upload the thumbnail
                    Link? thumbnailLink = result.Links.FirstOrDefault(x => x.Rel == EndpointRels.Advertisement.UpdateAdvertisementThumbnailRel);
                    if (thumbnailLink is not null)
                    {
                        using MultipartFormDataContent content = new();
                        using ByteArrayContent fileContent = new(_thumbnailFileData);
                        fileContent.Headers.ContentType = new MediaTypeHeaderValue(_thumbnailContentType ?? "image/jpeg");
                        content.Add(fileContent, "thumbnail", _thumbnailFileName);

                        await MainApiClient.PutFileAsync<AdvertisementHateoasResponse>(thumbnailLink.Href, content);
                    }
                }

                // Success - navigate back to advertisements list
                NavigationManager.NavigateTo("/user/advertisements");
            }
        }
        catch (Exception ex)
        {
            // Handle errors
            Console.Error.WriteLine($"Error creating advertisement: {ex.Message}");
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private class AdvertisementDto
    {
        [Required(ErrorMessage = "Opis jest wymagany")]
        [StringLength(2000, ErrorMessage = "Opis nie może przekraczać {1} znaków")]
        public string? Description { get; set; }

        [Required(ErrorMessage = "Email kontaktowy jest wymagany")]
        [EmailAddress(ErrorMessage = "Wprowadź poprawny adres email")]
        public string ContactInfoEmail { get; set; } = "";

        [Required(ErrorMessage = "Numer telefonu kontaktowego jest wymagany")]
        public string ContactInfoPhoneNumber { get; set; } = "";

        [Required(ErrorMessage = "Kraj jest wymagany")]
        public string PickupAddressCountry { get; set; } = "";

        [Required(ErrorMessage = "Województwo jest wymagane")]
        public string? PickupAddressState { get; set; }

        [Required(ErrorMessage = "Kod pocztowy jest wymagany")]
        public string PickupAddressZipCode { get; set; } = "";

        [Required(ErrorMessage = "Miasto jest wymagane")]
        public string PickupAddressCity { get; set; } = "";

        public string? PickupAddressStreet { get; set; }

        public string? PickupAddressBuildingNumber { get; set; }
    }
}