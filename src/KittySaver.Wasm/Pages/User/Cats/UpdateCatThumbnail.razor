@page "/user/cats/thumbnail/{Id:guid}"
@attribute [Authorize]
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Headers
@using KittySaver.Shared.Hateoas
@using KittySaver.Shared.Responses
@using KittySaver.Wasm.Shared
@using KittySaver.Wasm.Shared.HttpClients
@using KittySaver.Wasm.Shared.Validation
@using Microsoft.AspNetCore.Authorization
@inherits KittySaver.Wasm.Shared.Components.ApiAwareComponentBase
@inject IApiClient ApiClient
@inject NavigationManager NavigationManager
@inject IFileValidationService FileValidationService

<PageTitle>Uratujkota.pl - Aktualizacja miniaturki kota</PageTitle>

<div class="subpage_grid">
    <aside class="subpage_sidebar"></aside>
    <article class="subpage_content">
        <header class="subpage_header">
            <h1>Aktualizacja miniaturki kota</h1>
            <div class="subpage_header_action">
                <a href="/user/cats/@Id" class="default_btn btn_red">Anuluj</a>
            </div>
        </header>

        <section class="subpage_main_info">
            <div class="subpage_description advertisement_element">
                <h3>Miniaturka kota</h3>
                <p>Dodaj lub zaktualizuj główne zdjęcie dla Twojego kota. To zdjęcie będzie widoczne jako główne zdjęcie kota.</p>
            </div>

            <div class="subpage_description advertisement_element advertisement_element_warning">
                <p>
                    <strong>Ważne:</strong> Miniaturka jest wymagana, aby kot był widoczny poprawnie.
                    Bez niej kot będzie miał domyślne zdjęcie zastępcze.
                </p>
            </div>

            @if (_cat != null)
            {
                <div class="subpage_form_container">
                    <div class="subpage_form">
                        @if (_hasThumbnail)
                        {
                            <div class="login_form_tile">
                                <label>Obecna miniaturka:</label>
                                <div class="thumbnail-preview">
                                    <img src="@GetCurrentThumbnailUrl()" alt="Obecna miniaturka" style="max-width: 300px; max-height: 300px;" />
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="subpage_description advertisement_element advertisement_element_warning">
                                <p>
                                    <strong>Uwaga:</strong> Ten kot nie ma jeszcze miniaturki.
                                </p>
                            </div>
                        }

                        <div class="login_form_tile">
                            <label for="thumbnail">Wybierz nowe zdjęcie miniaturki:</label>
                            <InputFile id="thumbnail" OnChange="OnThumbnailSelected" accept=".jpg,.jpeg,.png,.webp" />
                            @if (!string.IsNullOrEmpty(_thumbnailError))
                            {
                                <div class="validation-message">@_thumbnailError</div>
                            }
                        </div>

                        @if (_thumbnailPreviewUrl != null)
                        {
                            <div class="login_form_tile">
                                <label>Podgląd nowej miniaturki:</label>
                                <div class="thumbnail-preview">
                                    <img src="@_thumbnailPreviewUrl" alt="Podgląd miniaturki" style="max-width: 300px; max-height: 300px;" />
                                </div>
                            </div>
                        }

                        <div class="login_form_tile_buttons">
                            <button type="button" class="default_btn" @onclick="NavigateBack">
                                Wróć
                            </button>
                            <button type="button" class="default_btn btn_green" @onclick="HandleSubmit" disabled="@(_thumbnailFileData == null || _isProcessing)">
                                @if (_isProcessing)
                                {
                                    <span>Aktualizowanie miniaturki...</span>
                                }
                                else
                                {
                                    <span>Zapisz nową miniaturkę</span>
                                }
                            </button>
                        </div>
                    </div>
                </div>
            }
            else if (_isLoading)
            {
                <div class="loading-indicator">
                    <p>Ładowanie...</p>
                </div>
            }
            else
            {
                <div class="subpage_description advertisement_element advertisement_element_warning">
                    <p>
                        <strong>Błąd:</strong> Nie można załadować danych kota.
                    </p>
                </div>
                <div class="login_form_tile_buttons">
                    <button type="button" class="default_btn" @onclick="NavigateBack">
                        Wróć do listy kotów
                    </button>
                </div>
            }
        </section>
    </article>
    <aside class="subpage_sidebar"></aside>
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private CatResponse? _cat;
    private bool _isLoading = true;
    private bool _hasThumbnail;
    private IBrowserFile? _thumbnailFile;
    private string? _thumbnailError;
    private string? _thumbnailPreviewUrl;
    private bool _isProcessing;
    
    // Properties for file handling
    private byte[]? _thumbnailFileData;
    private string? _thumbnailFileName;
    private string? _thumbnailContentType;

    // Maximum allowed file size in bytes (5MB)
    private const long MaxAllowedSize = 5 * 1024 * 1024;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadCat();
    }

    private async Task LoadCat()
    {
        _isLoading = true;
        
        try
        {
            // Try to get cat data using the links from API Navigation first
            Link? catLink = ApiNavigation.GetLink(EndpointRels.Cat.GetCatRel);
            string catUrl;
            
            if (catLink is not null)
            {
                // Replace any template parameter with the actual ID
                catUrl = catLink.Href
                    .Replace("{personId}", ApiNavigation.Response?.PersonId.ToString())
                    .Replace("{id}", Id.ToString());
            }
            else
            {
                // Fallback to direct URL construction
                NavigateBack();
                return;
            }
            
            _cat = await ApiClient.GetAsync<CatResponse>(catUrl);

            if (_cat is null)
            {
                NavigateBack();
                return;
            }
            
            // Check if the cat has a thumbnail
            _hasThumbnail = _cat.Links.Any(x => x.Rel == EndpointRels.Cat.GetCatThumbnailRel);
        }
        catch (Exception)
        {
            _cat = null;
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private string GetCurrentThumbnailUrl()
    {
        if (_cat is null || !_hasThumbnail)
        {
            return "/imgs/defaultCat.webp";
        }
        
        var thumbnailLink = _cat.Links.FirstOrDefault(x => x.Rel == EndpointRels.Cat.GetCatThumbnailRel);
        return thumbnailLink?.Href ?? "/imgs/defaultCat.webp";
    }

    private async Task OnThumbnailSelected(InputFileChangeEventArgs e)
    {
        _thumbnailFile = e.File;
        _thumbnailError = null;

        // Validate file
        ValidationResult? validationResult = FileValidationService.ValidateImageFile(_thumbnailFile);
        if (validationResult != null)
        {
            _thumbnailError = validationResult.ErrorMessage;
            return;
        }

        // Cache the file data immediately
        try
        {
            // Save file details
            _thumbnailFileName = _thumbnailFile.Name;
            _thumbnailContentType = _thumbnailFile.ContentType;
            
            // Read and cache file data
            await using var stream = _thumbnailFile.OpenReadStream(MaxAllowedSize);
            _thumbnailFileData = new byte[_thumbnailFile.Size];
            await stream.ReadAsync(_thumbnailFileData);

            // Create a preview URL
            var imageFile = await e.File.RequestImageFileAsync("image/jpeg", 300, 300);
            var buffer = new byte[imageFile.Size];
            await imageFile.OpenReadStream().ReadAsync(buffer);
            var imageDataUrl = $"data:image/jpeg;base64,{Convert.ToBase64String(buffer)}";
            _thumbnailPreviewUrl = imageDataUrl;
        }
        catch (Exception ex)
        {
            _thumbnailError = $"Błąd podczas tworzenia podglądu: {ex.Message}";
        }
    }

    private async Task HandleSubmit()
    {
        if (_cat == null || _thumbnailFileData == null || string.IsNullOrEmpty(_thumbnailFileName))
        {
            return;
        }

        _isProcessing = true;

        try
        {
            // Get the thumbnail update link from the cat links
            Link? thumbnailLink = _cat.Links.FirstOrDefault(x => x.Rel == EndpointRels.Cat.UpdateCatThumbnailRel);
            
            if (thumbnailLink != null)
            {
                using MultipartFormDataContent content = new();
                using ByteArrayContent fileContent = new(_thumbnailFileData);
                
                fileContent.Headers.ContentType = new MediaTypeHeaderValue(_thumbnailContentType ?? "image/jpeg");
                content.Add(fileContent, "thumbnail", _thumbnailFileName);

                await ApiClient.PutFileAsync<CatHateoasResponse>(thumbnailLink.Href, content);
                
                NavigateBack();
            }
            else
            {
                _thumbnailError = "Brak uprawnienia do aktualizacji miniaturki tego kota.";
            }
        }
        catch (Exception ex)
        {
            // Handle errors
            _thumbnailError = $"Błąd podczas aktualizacji miniaturki: {ex.Message}";
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/user/cats");
    }
}