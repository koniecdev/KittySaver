@page "/user/cats"
@attribute [Authorize]
@using KittySaver.Shared.Hateoas
@using KittySaver.Shared.Pagination
@using KittySaver.Shared.Responses
@using KittySaver.Wasm.Shared
@using KittySaver.Wasm.Shared.HttpClients
@using Microsoft.AspNetCore.Authorization
@using KittySaver.Wasm.Shared.Components
@inherits KittySaver.Wasm.Shared.Components.ApiAwareComponentBase
@inject IApiClient MainApiClient
@inject NavigationManager NavigationManager

<PageTitle>
    Uratujkota.pl - Twoje kotki
</PageTitle>

<div class="subpage_grid">
    <aside class="subpage_sidebar">

    </aside>
    <article class="subpage_content">
        <header class="subpage_header">
            <h1>Twoje kotki</h1>
            <div class="subpage_header_action">
                <a href="/user/cats/create" class="default_btn btn_green">+ Dodaj nowego kotka</a>
            </div>
        </header>
        <section class="subpage_main_info">
            <div class="subpage_description advertisement_element advertisement_element_warning">
                <p>
                    Aby koty były widoczne publicznie, dodaj je do ogłoszeń.
                </p>
            </div>
        </section>
        @{
            List<CatResponse> sortedCats = _cats.OrderByDescending(cat => cat.AdditionalRequirements?.Length).ToList();
            IEnumerable<CatResponse> leftColumn = sortedCats.Where((_, index) => index % 2 == 0);
            IEnumerable<CatResponse> rightColumn = sortedCats.Where((_, index) => index % 2 == 1);

            <section class="subpage_cats_grid">
                <div class="subpage_cats_grid_column">
                    @foreach (CatResponse cat in leftColumn)
                    {
                        <CatTileComponent Cat="cat" IsManagementView="true" />
                    }
                </div>
                <div class="subpage_cats_grid_column">
                    @foreach (CatResponse cat in rightColumn)
                    {
                        <CatTileComponent Cat="cat" IsManagementView="true" />
                    }
                </div>
            </section>
        }
    </article>
    <aside class="subpage_sidebar">

    </aside>
</div>

@code{
    private List<CatResponse> _cats = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await ApiNavigation.RefreshAsync();
        await LoadCats();
    }

    private async Task LoadCats()
    {
        Link? ownerCatsLink = ApiNavigation.GetLink(EndpointRels.Cat.GetCatsRel);
        if (ownerCatsLink is null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }
        PagedList<CatResponse>? catsPagedList = await MainApiClient.GetAsync<PagedList<CatResponse>>(ownerCatsLink.Href);
        _cats = catsPagedList?.Items.ToList() ?? [];
    }
}