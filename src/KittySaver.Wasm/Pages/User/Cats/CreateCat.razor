@page "/user/cats/create"
@attribute [Authorize]
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Headers
@using KittySaver.Shared.Common.Enums
@using KittySaver.Shared.Hateoas
@using KittySaver.Shared.Pagination
@using KittySaver.Shared.Requests
@using KittySaver.Shared.Responses
@using KittySaver.Wasm.Shared
@using KittySaver.Wasm.Shared.HttpClients
@using KittySaver.Wasm.Shared.Validation
@using Microsoft.AspNetCore.Authorization
@inherits KittySaver.Wasm.Shared.Components.ApiAwareComponentBase
@inject IApiClient ApiClient
@inject NavigationManager NavigationManager
@inject IFileValidationService FileValidationService

<div class="subpage_grid">
    <aside class="subpage_sidebar"></aside>
    <article class="subpage_content">
        <header class="subpage_header">
            <h1>@GetStepTitle()</h1>
            <div class="subpage_header_action">
                <a href="/user/cats" class="default_btn btn_red">Anuluj dodawanie kota</a>
            </div>
        </header>

        <!-- Wskaźnik postępu -->
        <div class="listing_wizard_steps">
            <div class="step @(_currentStep == WizardStep.CatInfo ? "active" : "")"
                 @onclick="async () => await NavigateToStepAsync(WizardStep.CatInfo)">
                1. Dane kota
            </div>
            <div class="step @(_currentStep == WizardStep.MainPhoto ? "active" : "") @(!_isValidCatInfo ? "disabled" : "")"
                 @onclick="async () => await NavigateToStepAsync(WizardStep.MainPhoto)">
                2. Zdjęcie główne
            </div>
            <div class="step @(_currentStep == WizardStep.Gallery ? "active" : "") @(!_isValidCatInfo ? "disabled" : "")"
                 @onclick="async () => await NavigateToStepAsync(WizardStep.Gallery)">
                3. Galeria zdjęć
            </div>
            <div class="step @(_currentStep == WizardStep.Advertisement ? "active" : "") @(!_isValidCatInfo ? "disabled" : "")"
                 @onclick="async () => await NavigateToStepAsync(WizardStep.Advertisement)">
                4. Ogłoszenie
            </div>
        </div>

        <!-- Zawartość etapu -->
        @switch (_currentStep)
        {
            case WizardStep.CatInfo:
                <section class="subpage_main_info">
                    <div class="subpage_description listing_element listing_element_warning">
                        <p>
                            W tym kroku dodajesz podstawowe informacje o kocie. Po zapisaniu, będziesz mógł dodać zdjęcia i utworzyć ogłoszenie.
                        </p>
                    </div>
                </section>
                <section class="subpage_form_container">
                    <EditForm EditContext="_editContext" OnSubmit="HandleValidateCatInfo" class="subpage_form">
                        <DataAnnotationsValidator />

                        <div class="login_form_tile">
                            <label for="name">Imie kotka:</label>
                            <InputText id="name" type="text" @bind-Value="_createCatDto.Name"/>
                            <ValidationMessage For="@(() => _createCatDto.Name)" />
                        </div>
                        <div class="login_form_tile">
                            <label>Czy kot jest już wysterylizowany/wykastrowany:</label>
                            <InputRadioGroup @bind-Value="_createCatDto.IsCastrated">
                                <div class="radio_item">
                                    <InputRadio Value="true" id="r1"/> <label for="r1">Tak</label>
                                </div>
                                <div class="radio_item">
                                    <InputRadio Value="false" id="r2"/> <label for="r2">Nie</label>
                                </div>
                            </InputRadioGroup>
                        </div>
                        <div class="login_form_tile">
                            <label for="healthStatus">Stan zdrowia:</label>
                            <InputSelect id="healthStatus" @bind-Value="_createCatDto.HealthStatus">
                                <option value="">Kliknij by wybrać</option>
                                @foreach (KeyValuePair<string, (string text, string className)> status in Dictionaries.HealthStatusDictionary)
                                {
                                    <option value="@status.Key">@status.Value.text</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => _createCatDto.HealthStatus)" />
                        </div>
                        <div class="login_form_tile">
                            <label for="medicalHelp">Pilność pomocy weterynaryjnej:</label>
                            <InputSelect id="medicalHelp" @bind-Value="_createCatDto.MedicalHelpUrgency">
                                <option value="">Kliknij by wybrać</option>
                                @foreach (KeyValuePair<string, (string text, string className)> urgency in Dictionaries.MedicalHelpUrgencyDictionary)
                                {
                                    <option value="@urgency.Key">@urgency.Value.text</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => _createCatDto.MedicalHelpUrgency)" />
                        </div>
                        <div class="login_form_tile">
                            <label for="ageCategory">Kategoria wiekowa:</label>
                            <InputSelect id="ageCategory" @bind-Value="_createCatDto.AgeCategory">
                                <option value="">Kliknij by wybrać</option>
                                @foreach (KeyValuePair<string, (string text, string className)> age in Dictionaries.AgeCategoryDictionary)
                                {
                                    <option value="@age.Key">@age.Value.text</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => _createCatDto.AgeCategory)" />
                        </div>
                        <div class="login_form_tile">
                            <label for="behaviour">Zachowanie względem ludzi:</label>
                            <InputSelect id="behaviour" @bind-Value="_createCatDto.Behavior">
                                <option value="">Kliknij by wybrać</option>
                                @foreach (KeyValuePair<string, (string text, string className)> age in Dictionaries.BehaviourDictionary)
                                {
                                    <option value="@age.Key">@age.Value.text</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => _createCatDto.Behavior)" />
                        </div>
                        <div class="login_form_tile span2">
                            <label for="additionalRequirements">Opis kota, dodatkowe wymagania:</label>
                            <InputTextArea id="additionalRequirements" @bind-Value="_createCatDto.AdditionalRequirements" rows="4"/>
                            <ValidationMessage For="@(() => _createCatDto.AdditionalRequirements)" />
                        </div>
                        <div class="login_form_tile_buttons">
                            <button class="default_btn btn_green" type="submit">
                                <span>Przejdź dalej</span>
                            </button>
                        </div>
                    </EditForm>
                </section>
                break;

            case WizardStep.MainPhoto:
                <section class="subpage_main_info">
                    <div class="subpage_description listing_element">
                        <h3>Główne zdjęcie kota</h3>
                        <p>
                            Dodaj lub zaktualizuj główne zdjęcie dla Twojego kota. To zdjęcie będzie widoczne jako główne zdjęcie kota w ogłoszeniu.
                        </p>
                    </div>

                    <div class="subpage_description listing_element listing_element_warning">
                        <p>
                            <strong>Ważne:</strong> Miniaturka jest wymagana, aby kot był widoczny poprawnie.
                            Bez niej kot będzie miał domyślne zdjęcie zastępcze.
                        </p>
                    </div>

                    <div class="subpage_form_container">
                        <div class="subpage_form">
                            @if (_mainPhotoPreviewUrl != null)
                            {
                                <div class="login_form_tile">
                                    <label>Podgląd miniaturki:</label>
                                    <div class="thumbnail-preview">
                                        <img src="@_mainPhotoPreviewUrl" alt="Podgląd miniaturki" style="max-width: 300px; max-height: 300px;" />
                                    </div>
                                </div>
                            }

                            <div class="login_form_tile">
                                <label for="mainPhoto">Wybierz zdjęcie główne:</label>
                                <InputFile id="mainPhoto" OnChange="OnMainPhotoSelected" accept=".jpg,.jpeg,.png,.webp" />
                                @if (!string.IsNullOrEmpty(_mainPhotoError))
                                {
                                    <div class="validation-message">@_mainPhotoError</div>
                                }
                            </div>

                            <div class="login_form_tile_buttons">
                                <button type="button" class="default_btn" @onclick="async () => await NavigateToStepAsync(WizardStep.CatInfo)">
                                    Wróć
                                </button>

                                <button type="button" class="default_btn btn_green" @onclick="async () => await NavigateToStepAsync(WizardStep.Gallery)">
                                    Przejdź dalej @(_mainPhotoFileData == null ? "(bez zdjęcia głównego)" : "")
                                </button>
                            </div>
                        </div>
                    </div>
                </section>
                break;

            case WizardStep.Gallery:
                <section class="subpage_main_info">
                    <div class="subpage_description listing_element">
                        <h3>Galeria zdjęć kota</h3>
                        <p>
                            Zdjęcia w galerii pomogą potencjalnym opiekunom lepiej poznać kota.
                            Im więcej zdjęć, tym większa szansa na znalezienie domu.
                        </p>
                    </div>

                    <div class="subpage_form_container">
                        <div class="subpage_form">
                            <div class="login_form_tile">
                                <label for="galleryPhotos">Wybierz zdjęcia do dodania:</label>
                                <InputFile id="galleryPhotos" @key="_inputFileKey" OnChange="OnGalleryPhotosSelected" accept=".jpg,.jpeg,.png,.webp" multiple />
                                @if (!string.IsNullOrEmpty(_galleryError))
                                {
                                    <div class="validation-message">@_galleryError</div>
                                }
                            </div>

                            <div class="login_form_tile_buttons">
                                <button type="button" class="default_btn" @onclick="async () => await NavigateToStepAsync(WizardStep.MainPhoto)">
                                    Wróć
                                </button>
                                <button type="button" class="default_btn btn_green" @onclick="async () => await NavigateToStepAsync(WizardStep.Advertisement)">
                                    <span>Przejdź dalej @(_tempGalleryFiles.Count == 0 ? "(bez zdjęć)" : "")</span>
                                </button>
                            </div>
                        </div>
                    </div>

                    <div class="subpage_description listing_element manage_gallery_container">
                        <h3>Wybrane zdjęcia do galerii</h3>
                        @if (!_tempGalleryFiles.Any())
                        {
                            <p>Galeria jest pusta. Dodaj zdjęcia używając formularza powyżej.</p>
                        }
                        else
                        {
                            <div class="manage_gallery_grid">
                                @foreach (var (fileData, contentType, fileName, previewUrl) in _tempGalleryFiles)
                                {
                                    <div class="manage_gallery_grid_tile">
                                        <div class="manage_gallery_grid_tile_wrapper">
                                            <img src="@previewUrl" alt="Zdjęcie kota" class="manage_gallery_grid_tile_image">
                                        </div>
                                        <div class="manage_gallery_grid_tile_buttons">
                                            <button type="button" class="default_btn btn_red" @onclick="() => RemoveTempGalleryImage(fileName)" disabled="@(_isDeleting)">
                                                <span>Usuń</span>
                                            </button>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </section>
                break;

            case WizardStep.Advertisement:
                <section class="subpage_main_info">
                    <div class="subpage_description listing_element">
                        <h3>Ogłoszenie dla kota</h3>
                        <p>
                            Możesz utworzyć nowe ogłoszenie dla tego kota lub dodać go do istniejącego ogłoszenia.
                        </p>
                    </div>

                    <div class="subpage_form_container">
                        <div class="subpage_form">
                            <div class="login_form_tile span2">
                                <h4>Wybierz opcję:</h4>
                                <div class="cat_listing_options">
                                    <div class="cat_listing_option @(_advertisementOption == AdvertisementOption.CreateNew ? "active" : "")"
                                         @onclick="() => _advertisementOption = AdvertisementOption.CreateNew">
                                        <div class="cat_listing_option_icon">
                                            <i class="fas fa-plus-circle"></i>
                                        </div>
                                        <div class="cat_listing_option_content">
                                            <h5>Utwórz nowe ogłoszenie</h5>
                                            <p>Utworzenie nowego ogłoszenia z tym kotem</p>
                                        </div>
                                    </div>

                                    <div class="cat_listing_option @(_advertisementOption == AdvertisementOption.AddToExisting ? "active" : "")"
                                         @onclick="() => _advertisementOption = AdvertisementOption.AddToExisting">
                                        <div class="cat_listing_option_icon">
                                            <i class="fas fa-clipboard-list"></i>
                                        </div>
                                        <div class="cat_listing_option_content">
                                            <h5>Dodaj do istniejącego ogłoszenia</h5>
                                            <p>Dodaj kota do istniejącego ogłoszenia z listy</p>
                                        </div>
                                    </div>

                                    <div class="cat_listing_option @(_advertisementOption == AdvertisementOption.Later ? "active" : "")"
                                         @onclick="() => _advertisementOption = AdvertisementOption.Later">
                                        <div class="cat_listing_option_icon">
                                            <i class="fas fa-clock"></i>
                                        </div>
                                        <div class="cat_listing_option_content">
                                            <h5>Utworzę ogłoszenie później</h5>
                                            <p>Kot będzie dostępny na liście twoich kotów, ale nie w ogłoszeniu</p>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (_advertisementOption == AdvertisementOption.AddToExisting)
                            {
                                <div class="login_form_tile span2">
                                    <label for="existingAdvertisement">Wybierz ogłoszenie:</label>
                                    <select id="existingAdvertisement" @bind="_selectedAdvertisementId">
                                        <option value="">Wybierz ogłoszenie</option>
                                        @foreach (var ad in _availableAdvertisements)
                                        {
                                            <option value="@ad.Id">@ad.Title</option>
                                        }
                                    </select>
                                    @if (_availableAdvertisements.Count == 0)
                                    {
                                        <div class="validation-message">Nie masz dostępnych ogłoszeń. Utwórz nowe lub wybierz inną opcję.</div>
                                    }
                                </div>
                            }

                            <div class="login_form_tile_buttons">
                                <button type="button" class="default_btn" @onclick="async () => await NavigateToStepAsync(WizardStep.Gallery)">
                                    Wróć
                                </button>
                                <button type="button" class="default_btn btn_green" @onclick="HandleCreateCatAndFinalize" disabled="@_isProcessing">
                                    @if (_isProcessing)
                                    {
                                        <span>Dodawanie kota...</span>
                                    }
                                    else
                                    {
                                        if (_advertisementOption == AdvertisementOption.CreateNew)
                                        {
                                            <span>Utwórz kota i nowe ogłoszenie</span>
                                        }
                                        else if (_advertisementOption == AdvertisementOption.AddToExisting)
                                        {
                                            <span>Dodaj kota do wybranego ogłoszenia</span>
                                        }
                                        else
                                        {
                                            <span>Utwórz kota i zakończ</span>
                                        }
                                    }
                                </button>
                            </div>
                        </div>
                    </div>
                </section>
                break;
        }
    </article>
    <aside class="subpage_sidebar"></aside>
</div>

@code {
    // Etapy kreatora
    private enum WizardStep
    {
        CatInfo,
        MainPhoto,
        Gallery,
        Advertisement
    }

    // Opcje dla ogłoszenia
    private enum AdvertisementOption
    {
        CreateNew,
        AddToExisting,
        Later
    }

    private WizardStep _currentStep = WizardStep.CatInfo;
    private AdvertisementOption _advertisementOption = AdvertisementOption.CreateNew;

    // Dane z pierwszego etapu (podstawowe informacje o kocie)
    private readonly CreateCatDto _createCatDto = new();
    private bool _isProcessing;
    private bool _isValidCatInfo;
    private CatHateoasResponse? _createdCatResponse;
    private Link _createCatLink = null!;
    private EditContext? _editContext;
    private ValidationMessageStore? _messageStore;

    // Dane dla etapu zdjęcia głównego
    private IBrowserFile? _mainPhoto;
    private string? _mainPhotoError;
    private string? _mainPhotoPreviewUrl;
    private byte[]? _mainPhotoFileData;
    private string? _mainPhotoFileName;
    private string? _mainPhotoContentType;

    // Dane dla etapu galerii
    private List<IBrowserFile> _selectedGalleryFiles = [];
    private List<(byte[] fileData, string contentType, string fileName, string previewUrl)> _tempGalleryFiles = [];
    private string? _galleryError;
    private bool _isUploading;
    private bool _isDeleting;
    private int _inputFileKey;

    // Dane dla etapu ogłoszenia
    private List<AdvertisementResponse> _availableAdvertisements = [];
    private string? _selectedAdvertisementId;

    protected override void OnInitialized()
    {
        Link? createPersonLink = ApiNavigation.Response?.Links.FirstOrDefault(x => x.Rel == EndpointRels.Cat.CreateCatRel);
        if (createPersonLink is null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        _createCatLink = createPersonLink;

        _editContext = new EditContext(_createCatDto);
        _messageStore = new ValidationMessageStore(_editContext);
        _editContext.OnValidationRequested += HandleValidationRequested;
        base.OnInitialized();
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        _messageStore?.Clear();

        if (_mainPhoto is not null)
        {
            ValidationResult? mainPhotoValidation = FileValidationService.ValidateImageFile(_mainPhoto, false);
            if (mainPhotoValidation is not null)
            {
                _messageStore?.Add(() => _mainPhoto, mainPhotoValidation.ErrorMessage!);
                _mainPhotoError = mainPhotoValidation.ErrorMessage;
            }
            else
            {
                _mainPhotoError = null;
            }
        }

        StateHasChanged();
    }

    private string GetStepTitle()
    {
        return _currentStep switch
        {
            WizardStep.CatInfo => "Dodaj nowego kotka",
            WizardStep.MainPhoto => "Dodaj zdjęcie główne kota",
            WizardStep.Gallery => "Zarządzaj galerią zdjęć kota",
            WizardStep.Advertisement => "Dodaj kota do ogłoszenia",
            _ => "Dodaj nowego kotka"
        };
    }

    private async Task NavigateToStepAsync(WizardStep step)
    {
        // Jeśli próbujemy przejść do etapu, który wymaga wcześniejszego walidacji danych kota
        if (step > WizardStep.CatInfo && !_isValidCatInfo)
        {
            return;
        }

        _currentStep = step;

        // Jeśli przechodzimy do etapu ogłoszenia, załaduj dostępne ogłoszenia
        if (step == WizardStep.Advertisement)
        {
            await LoadAvailableAdvertisements();
        }
    }

    // Obsługa pierwszego etapu - podstawowe informacje o kocie - tylko walidacja, bez zapisywania
    private async Task HandleValidateCatInfo()
    {
        if (_editContext?.Validate() != true)
        {
            return;
        }

        _isValidCatInfo = true;
        await NavigateToStepAsync(WizardStep.MainPhoto);
    }

    // Obsługa etapu zdjęcia głównego
    private async Task OnMainPhotoSelected(InputFileChangeEventArgs e)
    {
        _mainPhoto = e.File;
        _mainPhotoError = null;

        // Validate file
        ValidationResult? validationResult = FileValidationService.ValidateImageFile(_mainPhoto, false);
        if (validationResult != null)
        {
            _mainPhotoError = validationResult.ErrorMessage;
            return;
        }

        // Cache the file data immediately
        try
        {
            // Save file details
            _mainPhotoFileName = _mainPhoto.Name;
            _mainPhotoContentType = _mainPhoto.ContentType;

            // Read and cache file data
            await using Stream stream = _mainPhoto.OpenReadStream(maxAllowedSize: 20 * 1024 * 1024);
            _mainPhotoFileData = new byte[_mainPhoto.Size];
            await stream.ReadAsync(_mainPhotoFileData);

            // Create a preview URL
            IBrowserFile imageFile = await e.File.RequestImageFileAsync("image/jpeg", 300, 300);
            byte[] buffer = new byte[imageFile.Size];
            await imageFile.OpenReadStream(maxAllowedSize: 20 * 1024 * 1024).ReadAsync(buffer);
            string imageDataUrl = $"data:image/jpeg;base64,{Convert.ToBase64String(buffer)}";
            _mainPhotoPreviewUrl = imageDataUrl;
        }
        catch (Exception ex)
        {
            _mainPhotoError = $"Błąd podczas tworzenia podglądu: {ex.Message}";
        }
    }

    // Obsługa etapu galerii
    private async Task OnGalleryPhotosSelected(InputFileChangeEventArgs e)
    {
        _selectedGalleryFiles = e.GetMultipleFiles().ToList();
        _galleryError = null;

        // Validate files
        foreach (IBrowserFile file in _selectedGalleryFiles)
        {
            ValidationResult? validationResult = FileValidationService.ValidateImageFile(file);
            if (validationResult == null)
            {
                continue;
            }
            _galleryError = validationResult.ErrorMessage;
            _selectedGalleryFiles.Clear();
            StateHasChanged();
            return;
        }

        // Dodajemy pliki do tymczasowej kolekcji
        if (_selectedGalleryFiles.Count > 0)
        {
            await AddFilesToTempGallery();
        }
    }

    private async Task AddFilesToTempGallery()
    {
        try
        {
            _isUploading = true;
            StateHasChanged();

            foreach (IBrowserFile file in _selectedGalleryFiles)
            {
                // Tworzenie podglądu
                IBrowserFile imageFile = await file.RequestImageFileAsync("image/jpeg", 300, 300);
                byte[] previewBuffer = new byte[imageFile.Size];
                await imageFile.OpenReadStream(maxAllowedSize: 20 * 1024 * 1024).ReadAsync(previewBuffer);
                string previewUrl = $"data:image/jpeg;base64,{Convert.ToBase64String(previewBuffer)}";

                // Odczytywanie pełnych danych pliku
                Stream stream = file.OpenReadStream(maxAllowedSize: 20 * 1024 * 1024);
                byte[] fileData = new byte[file.Size];
                await stream.ReadAsync(fileData);

                // Dodawanie do kolekcji
                _tempGalleryFiles.Add((fileData, file.ContentType, file.Name, previewUrl));
            }

            // Czyszczenie wybranych plików
            _selectedGalleryFiles.Clear();
            _inputFileKey++;
        }
        catch (Exception ex)
        {
            _galleryError = $"Błąd podczas dodawania zdjęć: {ex.Message}";
        }
        finally
        {
            _isUploading = false;
            StateHasChanged();
        }
    }

    private void RemoveTempGalleryImage(string fileName)
    {
        int index = _tempGalleryFiles.FindIndex(f => f.fileName == fileName);
        if (index >= 0)
        {
            _tempGalleryFiles.RemoveAt(index);
            StateHasChanged();
        }
    }

    // Obsługa etapu ogłoszenia i finalizacji
    private async Task LoadAvailableAdvertisements()
    {
        try
        {
            // Pobierz listę ogłoszeń użytkownika, które są aktywne
            Link? advertisementsLink = ApiNavigation.GetLink(EndpointRels.Advertisement.GetPersonAdvertisementsRel);
            if (advertisementsLink != null)
            {
                PagedList<AdvertisementResponse>? result = await ApiClient.GetAsync<PagedList<AdvertisementResponse>>(advertisementsLink.Href);
                if (result?.Items != null)
                {
                    // Filtruj tylko aktywne ogłoszenia
                    _availableAdvertisements = result.Items
                        .Where(a => a.Status is AdvertisementStatus.Active or AdvertisementStatus.ThumbnailNotUploaded)
                        .ToList();
                }
            }
        }
        catch (Exception)
        {
            // Obsługa błędów
            _availableAdvertisements = [];
        }
    }

    // Faktyczne tworzenie kota i upload wszystkich danych
    private async Task HandleCreateCatAndFinalize()
    {
        if (!_isValidCatInfo)
        {
            return;
        }

        _isProcessing = true;

        try
        {
            // 1. Utwórz kota
            CreateCatRequest createCatRequest = new(
                _createCatDto.Name,
                _createCatDto.IsCastrated,
                _createCatDto.MedicalHelpUrgency,
                _createCatDto.AgeCategory,
                _createCatDto.Behavior,
                _createCatDto.HealthStatus,
                _createCatDto.AdditionalRequirements);

            _createdCatResponse = await ApiClient.PostAsync<CreateCatRequest, CatHateoasResponse>(_createCatLink.Href, createCatRequest);

            // 2. Wgraj miniaturkę jeśli jest
            if (_mainPhotoFileData != null && _createdCatResponse != null)
            {
                Link? uploadThumbnailLink = _createdCatResponse.Links.FirstOrDefault(x => x.Rel == EndpointRels.Cat.UpdateCatThumbnailRel);
                if (uploadThumbnailLink != null)
                {
                    using MultipartFormDataContent content = new MultipartFormDataContent();
                    using ByteArrayContent fileContent = new ByteArrayContent(_mainPhotoFileData);
                    fileContent.Headers.ContentType = new MediaTypeHeaderValue(_mainPhotoContentType ?? "image/jpeg");
                    content.Add(fileContent, "thumbnail", _mainPhotoFileName ?? "thumbnail.jpg");

                    await ApiClient.PutFileAsync<CatHateoasResponse>(uploadThumbnailLink.Href, content);
                }
            }

            // 3. Wgraj zdjęcia do galerii jeśli są
            if (_tempGalleryFiles.Any() && _createdCatResponse != null)
            {
                Link? addToGalleryLink = _createdCatResponse.Links.FirstOrDefault(x => x.Rel == EndpointRels.Cat.AddPicturesToCatGalleryRel);
                if (addToGalleryLink != null)
                {
                    using MultipartFormDataContent content = new MultipartFormDataContent();

                    foreach (var (fileData, contentType, fileName, _) in _tempGalleryFiles)
                    {
                        ByteArrayContent fileContent = new ByteArrayContent(fileData);
                        fileContent.Headers.ContentType = new MediaTypeHeaderValue(contentType);
                        content.Add(fileContent, "galleryFiles", fileName);
                    }

                    await ApiClient.PostFileAsync<CatHateoasResponse>(addToGalleryLink.Href, content);
                }
            }

            // 4. Obsłuż wybraną opcję ogłoszenia
            HandleAdvertisementOption();
        }
        catch (Exception ex)
        {
            // Obsługa błędów
            _messageStore?.Clear();
            _messageStore?.Add(() => _createCatDto, $"Wystąpił błąd podczas zapisywania danych: {ex.Message}");
            _isProcessing = false;
            StateHasChanged();
        }
    }

    private void HandleAdvertisementOption()
    {
        if (_createdCatResponse == null)
        {
            return;
        }

        switch (_advertisementOption)
        {
            case AdvertisementOption.CreateNew:
                // Przekieruj do strony tworzenia ogłoszenia z predefiniowanym kotem
                NavigationManager.NavigateTo($"/user/advertisements/create?catId={_createdCatResponse.Id}");
                break;

            case AdvertisementOption.AddToExisting:
                if (string.IsNullOrEmpty(_selectedAdvertisementId))
                {
                    // Brak wybranego ogłoszenia
                    _isProcessing = false;
                    StateHasChanged();
                    return;
                }

                // Przekieruj do strony edycji ogłoszenia
                NavigationManager.NavigateTo($"/user/advertisements/update/{_selectedAdvertisementId}?addCatId={_createdCatResponse.Id}");
                break;

            case AdvertisementOption.Later:
                // Zakończ proces i przekieruj do listy kotów
                NavigationManager.NavigateTo("/user/cats");
                break;
        }
    }

    public void Dispose()
    {
        if (_editContext != null)
        {
            _editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }

    public sealed class CreateCatDto : IValidatableObject
    {
        [Required(ErrorMessage = "Imię kota jest wymagane")]
        [StringLength(CatValidationConstants.NameMaxLength, ErrorMessage = "Imię kota nie może przekraczać {1} znaków")]
        public string Name { get; set; } = "";

        public bool IsCastrated { get; set; }

        [Required(ErrorMessage = "Pilność pomocy weterynaryjnej jest wymagana")]
        public string MedicalHelpUrgency { get; set; } = "";

        [Required(ErrorMessage = "Kategoria wiekowa jest wymagana")]
        public string AgeCategory { get; set; } = "";

        [Required(ErrorMessage = "Zachowanie względem ludzi jest wymagane")]
        public string Behavior { get; set; } = "";

        [Required(ErrorMessage = "Stan zdrowia jest wymagany")]
        public string HealthStatus { get; set; } = "";

        [StringLength(CatValidationConstants.AdditionalRequirementsMaxLength, ErrorMessage = "Opis nie może przekraczać {1} znaków")]
        public string? AdditionalRequirements { get; set; }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}