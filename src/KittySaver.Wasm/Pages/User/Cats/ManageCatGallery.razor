@page "/user/cats/gallery/{Id:guid}"
@attribute [Authorize]
@using System.Net.Http.Headers
@using KittySaver.Shared.Hateoas
@using KittySaver.Shared.Responses
@using KittySaver.Wasm.Shared.HttpClients
@using KittySaver.Wasm.Shared.Validation
@using Microsoft.AspNetCore.Authorization
@inherits KittySaver.Wasm.Shared.Components.ApiAwareComponentBase
@inject IApiClient ApiClient
@inject NavigationManager NavigationManager
@inject IFileValidationService FileValidationService

<PageTitle>Uratujkota.pl - Zarządzanie galerią zdjęć kota</PageTitle>

<div class="subpage_grid">
    <aside class="subpage_sidebar"></aside>
    <article class="subpage_content">
        <header class="subpage_header">
            <h1>@($"Zarządzanie galerią kota - {_catName}")</h1>
            <div class="subpage_header_action">
                <a href="/user/cats/@Id" class="default_btn">Anuluj</a>
            </div>
        </header>

        <section class="subpage_main_info">
            <div class="subpage_description advertisement_element">
                <p>
                    Zdjęcia w galerii pomogą potencjalnym opiekunom lepiej poznać kota.
                    Im więcej zdjęć, tym większa szansa na znalezienie domu.
                </p>
            </div>

            @if (!_isLoading && !string.IsNullOrEmpty(_errorMessage))
            {
                <div class="subpage_description advertisement_element advertisement_element_warning">
                    <p><strong>Błąd:</strong> @_errorMessage</p>
                </div>
                <div class="login_form_tile_buttons">
                    <button class="default_btn" @onclick="LoadCatData">Spróbuj ponownie</button>
                    <a href="/user/cats" class="default_btn">Powrót do listy kotów</a>
                </div>
            }
            else if (_isLoading)
            {
                <div class="loading-indicator">
                    <p>Ładowanie...</p>
                </div>
            }
            else
            {
                <div class="subpage_form_container">
                    <div class="subpage_form">
                        <div class="login_form_tile">
                            <label for="newImages">Wybierz zdjęcia do dodania:</label>
                            <InputFile id="newImages" OnChange="OnGalleryPhotosSelected" accept=".jpg,.jpeg,.png,.webp" multiple />
                            @if (!string.IsNullOrEmpty(_galleryError))
                            {
                                <div class="validation-message">@_galleryError</div>
                            }
                        </div>

                        <div class="login_form_tile_buttons">
                            <button type="button" class="default_btn" @onclick="NavigateBack">
                                Wróć
                            </button>
                            <button type="button" class="default_btn btn_green" @onclick="UploadGalleryPhotos" disabled="@(_selectedFiles.Count == 0 || _isUploading)">
                                @if (_isUploading)
                                {
                                    <span>Przesyłanie zdjęć...</span>
                                }
                                else
                                {
                                    <span>Dodaj wybrane zdjęcia (@_selectedFiles.Count)</span>
                                }
                            </button>
                        </div>
                    </div>
                </div>

                <div class="subpage_description advertisement_element">
                    <h3>Aktualne zdjęcia w galerii</h3>
                    
                    @if (!_galleryImages.Any())
                    {
                        <p>Galeria jest pusta. Dodaj zdjęcia używając formularza powyżej.</p>
                    }
                    else
                    {
                        <div class="gallery-grid">
                            @foreach (PictureResponse image in _galleryImages)
                            {
                                <div class="gallery-item">
                                    <div class="gallery-image-wrapper">
                                        <img src="@GetGalleryImageUrl(image.FilenameWithExtension)" alt="Zdjęcie kota" class="gallery-image" />
                                        <div class="gallery-buttons">
                                            <button type="button" class="default_btn btn_red" @onclick="() => DeleteGalleryImage(image.FilenameWithExtension)" disabled="@(_isDeleting)">
                                                @if (_isDeleting && _currentlyDeletingImage == image.FilenameWithExtension)
                                                {
                                                    <span>Usuwanie...</span>
                                                }
                                                else
                                                {
                                                    <span>Usuń</span>
                                                }
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        </section>
    </article>
    <aside class="subpage_sidebar"></aside>
</div>

<style>
    .gallery-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 16px;
        margin-top: 20px;
    }
    
    .gallery-item {
        border: 1px solid #ccc;
        border-radius: 8px;
        overflow: hidden;
        background: #fff;
    }
    
    .gallery-image-wrapper {
        position: relative;
    }
    
    .gallery-image {
        width: 100%;
        height: 200px;
        object-fit: cover;
        display: block;
    }
    
    .gallery-buttons {
        padding: 8px;
        display: flex;
        justify-content: center;
        border-top: 1px solid #eee;
    }
    
    .validation-message {
        color: #721c24;
        margin-top: 5px;
    }
    
    .loading-indicator {
        text-align: center;
        padding: 20px;
    }
</style>

@code {
    [Parameter] public Guid Id { get; set; }
    
    private bool _isLoading = true;
    private bool _isUploading;
    private bool _isDeleting;
    private string? _errorMessage;
    private string? _catName;
    private string? _galleryError;
    private string? _currentlyDeletingImage;
    private List<PictureResponse> _galleryImages = new();
    private List<IBrowserFile> _selectedFiles = new();
    private Link? _getGalleryLink;
    private Link? _getGalleryImageLink;
    private Link? _addToGalleryLink;
    private Link? _removeFromGalleryLink;
    
    // Maksymalny rozmiar pliku w bajtach (10MB)
    private const long MaxAllowedSize = 10 * 1024 * 1024;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadCatData();
    }
    
    private async Task LoadCatData()
    {
        try {
            _isLoading = true;
            _errorMessage = null;
            
            // Get cat details to find gallery links
            Link? getCatLink = ApiNavigation.GetLink(EndpointRels.Cat.GetCatRel);
            if (getCatLink is null || ApiNavigation.Response?.PersonId is null)
            {
                _errorMessage = "Nie można załadować danych kota.";
                return;
            }
            
            string catUrl = getCatLink.Href
                .Replace("{personId}", ApiNavigation.Response.PersonId.ToString())
                .Replace("{id}", Id.ToString());
                
            var cat = await ApiClient.GetAsync<CatResponse>(catUrl);
            if (cat is null)
            {
                _errorMessage = "Nie znaleziono kota.";
                return;
            }
            
            _catName = cat.Name;
            
            // Find the gallery links
            _getGalleryLink = cat.Links.FirstOrDefault(x => x.Rel == EndpointRels.Cat.GetCatGalleryRel);
            _getGalleryImageLink = cat.Links.FirstOrDefault(x => x.Rel == EndpointRels.Cat.GetCatGalleryPictureRel);
            _addToGalleryLink = cat.Links.FirstOrDefault(x => x.Rel == EndpointRels.Cat.AddPicturesToCatGalleryRel);
            _removeFromGalleryLink = cat.Links.FirstOrDefault(x => x.Rel == EndpointRels.Cat.RemovePictureFromCatGalleryRel);
            
            // Check if links are available
            if (_getGalleryLink is null)
            {
                _errorMessage = "Brak dostępu do galerii zdjęć kota.";
                return;
            }
            
            // Load gallery images
            await LoadGalleryImages();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Wystąpił błąd: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private async Task LoadGalleryImages()
    {
        if (_getGalleryLink is null)
        {
            return;
        }
        
        try
        {
            var response = await ApiClient.GetAsync<List<PictureResponse>>(_getGalleryLink.Href);
            _galleryImages = response ?? new List<PictureResponse>();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Błąd podczas ładowania galerii: {ex.Message}";
        }
    }
    
    private string GetGalleryImageUrl(string filename)
    {
        if (_getGalleryImageLink is null || ApiNavigation.Response?.PersonId is null)
        {
            return "";
        }
        
        return _getGalleryImageLink.Href
            .Replace("{personId}", ApiNavigation.Response.PersonId.ToString())
            .Replace("{id}", Id.ToString())
            .Replace("{filename}", filename);
    }
    
    private void OnGalleryPhotosSelected(InputFileChangeEventArgs e)
    {
        _selectedFiles = e.GetMultipleFiles().ToList();
        _galleryError = null;
        
        // Validate files
        foreach (var file in _selectedFiles)
        {
            var validationResult = FileValidationService.ValidateImageFile(file);
            if (validationResult != null)
            {
                _galleryError = validationResult.ErrorMessage;
                _selectedFiles.Clear();
                break;
            }
        }
    }
    
    private async Task UploadGalleryPhotos()
    {
        if (_addToGalleryLink is null || _selectedFiles.Count == 0)
        {
            return;
        }
        
        try
        {
            _isUploading = true;
            _galleryError = null;
            
            using var content = new MultipartFormDataContent();
            
            // Przetwarzamy każdy plik osobno
            foreach (var file in _selectedFiles)
            {
                // Otwieramy strumień z określonym maksymalnym rozmiarem
                var stream = file.OpenReadStream(MaxAllowedSize);
                
                // Tworzymy bufor o rozmiarze pliku
                byte[] buffer = new byte[file.Size];
                
                // Odczytujemy całą zawartość pliku do bufora
                await stream.ReadExactlyAsync(buffer, 0, buffer.Length);
                
                // Używamy ByteArrayContent zamiast StreamContent
                var fileContent = new ByteArrayContent(buffer);
                fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
                
                // Dodajemy zawartość do formularza
                content.Add(fileContent, "galleryFiles", file.Name);
            }
            
            // Upload files
            await ApiClient.PostFileAsync<CatHateoasResponse>(_addToGalleryLink.Href, content);
            
            // Clear selection and reload images
            _selectedFiles.Clear();
            await LoadGalleryImages();
        }
        catch (Exception ex)
        {
            _galleryError = $"Błąd podczas przesyłania zdjęć: {ex.Message}";
        }
        finally
        {
            _isUploading = false;
        }
    }
    
    private async Task DeleteGalleryImage(string filename)
    {
        if (_removeFromGalleryLink is null)
        {
            return;
        }
        
        try
        {
            _isDeleting = true;
            _currentlyDeletingImage = filename;
            
            string deleteUrl = _removeFromGalleryLink.Href
                .Replace("{personId}", ApiNavigation.Response?.PersonId.ToString())
                .Replace("{id}", Id.ToString())
                .Replace("{filename}", filename);
                
            await ApiClient.DeleteAsync(deleteUrl);
            
            // Reload gallery after deletion
            await LoadGalleryImages();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Błąd podczas usuwania zdjęcia: {ex.Message}";
        }
        finally
        {
            _isDeleting = false;
            _currentlyDeletingImage = null;
        }
    }
    
    private void NavigateBack()
    {
        NavigationManager.NavigateTo($"/user/cats/{Id}");
    }
}