@page "/advertisement/{Id:guid}"
@using KittySaver.Shared.Hateoas
@using KittySaver.Shared.Responses
@using KittySaver.Shared.TypedIds
@using KittySaver.Wasm.Shared.Components
@using KittySaver.Wasm.Shared.HttpClients
@inherits KittySaver.Wasm.Shared.Components.ApiAwareComponentBase
@inject IAdvertisementStateService AdvertisementState
@inject IApiClient MainApiClient

<PageTitle>Uratujkota.pl - Szczegóły ogłoszenia</PageTitle>

@if (_advertisement == null)
{
    <p>Ładowanie szczegółów ogłoszenia...</p>
}
else
{
    <div class="subpage_grid">
        <aside class="subpage_sidebar">

        </aside>
        <article class="subpage_content">
            <header class="subpage_header listing_header">
                <h1>@_advertisement.Title</h1>
                <p class="listing_element">
                    @_advertisement.PickupAddress.City
                    <br>
                    @_advertisement.PickupAddress.ZipCode @(_advertisement.PickupAddress.State is not null ? $"- {_advertisement.PickupAddress.State}" : "")
                </p>
                <div class="subpage_advertiser listing_element">
                    <strong>Ogłoszeniodawca - @_advertisement.PersonName</strong>
                    <button class="btn @(_addressEmailButtonActive ? "btn_active" : "")" @onclick="ShowEmail">
                        <div class="btn_listing_contact_inner">
                            <svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 122.88 85.57"><title>mail</title><path d="M3.8,0,62.48,47.85,118.65,0ZM0,80.52,41.8,38.61,0,4.53v76ZM46.41,42.37,3.31,85.57h115.9L78,42.37,64.44,53.94h0a3,3,0,0,1-3.78.05L46.41,42.37Zm36.12-3.84,40.35,42.33V4.16L82.53,38.53Z"/></svg>
                            <span>@_addressEmailButtonText</span>
                            @if (_addressEmailButtonActive)
                            {
                                <a class="btn_listing_contact_clickable_link" href="mailto:@_addressEmailButtonText">
                                    napisz
                                </a>
                            }
                        </div>
                    </button>
                    <button class="btn @(_addressPhoneButtonActive ? "btn_active" : "")" @onclick="ShowPhone">
                        <div class="btn_listing_contact_inner">
                            <svg id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 122.88 122.27" style="enable-background:new 0 0 122.88 122.27" xml:space="preserve"><g><path d="M33.84,50.25c4.13,7.45,8.89,14.6,15.07,21.12c6.2,6.56,13.91,12.53,23.89,17.63c0.74,0.36,1.44,0.36,2.07,0.11 c0.95-0.36,1.92-1.15,2.87-2.1c0.74-0.74,1.66-1.92,2.62-3.21c3.84-5.05,8.59-11.32,15.3-8.18c0.15,0.07,0.26,0.15,0.41,0.21 l22.38,12.87c0.07,0.04,0.15,0.11,0.21,0.15c2.95,2.03,4.17,5.16,4.2,8.71c0,3.61-1.33,7.67-3.28,11.1 c-2.58,4.53-6.38,7.53-10.76,9.51c-4.17,1.92-8.81,2.95-13.27,3.61c-7,1.03-13.56,0.37-20.27-1.69 c-6.56-2.03-13.17-5.38-20.39-9.84l-0.53-0.34c-3.31-2.07-6.89-4.28-10.4-6.89C31.12,93.32,18.03,79.31,9.5,63.89 C2.35,50.95-1.55,36.98,0.58,23.67c1.18-7.3,4.31-13.94,9.77-18.32c4.76-3.84,11.17-5.94,19.47-5.2c0.95,0.07,1.8,0.62,2.25,1.44 l14.35,24.26c2.1,2.72,2.36,5.42,1.21,8.12c-0.95,2.21-2.87,4.25-5.49,6.15c-0.77,0.66-1.69,1.33-2.66,2.03 c-3.21,2.33-6.86,5.02-5.61,8.18L33.84,50.25L33.84,50.25L33.84,50.25z"/></g></svg>
                            <span>@_addressPhoneButtonText</span>
                            @if (_addressPhoneButtonActive)
                            {
                                <a class="btn_listing_contact_clickable_link" href="tel:@_addressPhoneButtonText">
                                    zadzwoń
                                </a>
                            }
                        </div>
                    </button>
                </div>
            </header>
            <section class="subpage_main_info">
                @if (_advertisement.Cats.Count > 1)
                {
                    <div class="subpage_reminder listing_element listing_element_warning">
                        <strong>Uwaga</strong>
                        <p>
                            Prosimy pamiętać, że ogłoszeniodawca chce wydać wszystkie koty z tego ogłoszenia do jednego
                            domu. Nie ma innej możliwości jak adoptować razem wszystkie koty z tego ogłoszenia.
                        </p>
                    </div>
                }
                <div class="subpage_description listing_element">
                    <strong>Opis ogłoszenia</strong>
                    <p>
                        @_advertisement.Description
                    </p>
                </div>
            </section>
            @if (_cats == null)
            {
                <p>Ładowanie kotków...</p>
            }
            else
            {
                List<CatResponse> sortedCats = _cats.Items.OrderByDescending(cat => cat.AdditionalRequirements?.Length).ToList();
                IEnumerable<CatResponse> leftColumn = sortedCats.Where((_, index) => index % 2 == 0);
                IEnumerable<CatResponse> rightColumn = sortedCats.Where((_, index) => index % 2 == 1);
                
                <section class="subpage_cats_grid">
                    <div class="subpage_cats_grid_column">
                        @foreach (CatResponse cat in leftColumn)
                        {
                            <CatTileComponent 
                                Cat="cat" 
                                IsManagementView="false" />
                        }
                    </div>
                    <div class="subpage_cats_grid_column">
                        @foreach (CatResponse cat in rightColumn)
                        {
                            <CatTileComponent 
                                Cat="cat" 
                                IsManagementView="false"/>
                        }
                    </div>
                </section>
            }
        </article>
        <aside class="subpage_sidebar">

        </aside>
    </div>
}

@code {
    [Parameter] public Guid Id { get; set; }
    
    private AdvertisementResponse? _advertisement;
    private PagedList<CatResponse>? _cats;

    private string _addressEmailButtonText = "Pokaż adres email";
    private bool _addressEmailButtonActive;
    private string _addressPhoneButtonText = "Pokaż nr telefonu";
    private bool _addressPhoneButtonActive;

    private void ShowEmail()
    {
        if (_advertisement is null || _addressEmailButtonActive)
        {
            return;
        }
        _addressEmailButtonText = _advertisement.ContactInfoEmail;
        _addressEmailButtonActive = true;
    }
    
    private void ShowPhone()
    {
        if (_advertisement is null || _addressPhoneButtonActive)
        {
            return;
        }
        _addressPhoneButtonText = _advertisement.ContactInfoPhoneNumber;
        _addressPhoneButtonActive = true;
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnInitializedAsync();
        await LoadAdvertisement();
    }

    private async Task LoadAdvertisement()
    {
        Link? link = AdvertisementState.GetSelectedAdvertisementLink(new AdvertisementId(Id));

        if (link is not null)
        {
            _advertisement = await MainApiClient.GetAsync<AdvertisementResponse>(link.Href);
            AdvertisementState.ClearSelectedAdvertisementLink(new AdvertisementId(Id));
        }
        else
        {
            Link? discoveryLink = ApiNavigation.GetLink(EndpointRels.Advertisement.GetPublicAdvertisementRel);
            if (discoveryLink is not null)
            {
                string href = discoveryLink.Href.Replace("{id}", Id.ToString());
                _advertisement = await MainApiClient.GetAsync<AdvertisementResponse>(href);
            }
        }

        if (_advertisement is not null)
        {
            string? advertisementCatsHref = _advertisement.Links
                .FirstOrDefault(x => x.Rel == EndpointRels.Advertisement.GetAdvertisementCatsRel)?.Href;
            if (!string.IsNullOrWhiteSpace(advertisementCatsHref))
            {
                _cats = await MainApiClient.GetAsync<PagedList<CatResponse>>(advertisementCatsHref);
            }
        }
    }
}