@page "/login"
@using Ardalis.Result
@using KittySaver.Shared.Requests
@using KittySaver.Shared.Responses
@using KittySaver.Wasm.Shared.Extensions
@using KittySaver.Wasm.Shared.HttpClients
@inherits KittySaver.Wasm.Shared.Components.ApiAwareComponentBase
@inject IApiClient ApiClient
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

<PageTitle>Uratujkota.pl - Zaloguj się - Bo życie kotków jest priorytetem - Portal adopcyjny dla potrzebujących kotów.</PageTitle>

<div class="login_wrapper">
    <section class="login_container">
        <header>
            <h2>Logowanie do konta</h2>
        </header>

        @if (!string.IsNullOrEmpty(_statusMessage))
        {
            <div class="status-message @(_statusSuccess ? "status-success" : "status-error")">
                <p>@_statusMessage</p>
            </div>
        }

        <EditForm Model="_loginDto" OnSubmit="HandleLogin" class="login_form">
            <div class="login_form_tile">
                <label for="email">Twój adres email:</label>
                <InputText id="email" type="email" @bind-Value="_loginDto.Email" required />
                <div class="login_form_errors">
                    @if (_emailIsInvalid)
                    {
                        foreach (string error in _emailErrors)
                        {
                            <div class="input_error">@error</div>
                        }
                    }
                </div>
            </div>
            <div class="login_form_tile">
                <label for="password" class="two_part_label">
                    <span>
                        Twoje hasło:
                    </span>
                    <small class="forgot-password">
                        <a class="tdu" href="/reset-password">Zapomniałeś hasła?</a>
                    </small>
                </label>
                <InputText id="password" type="password" @bind-Value="_loginDto.Password" required />
                <div class="login_form_errors">
                    @if (_passwordIsInvalid)
                    {
                        foreach (string error in _passwordErrors)
                        {
                            <div class="input_error">@error</div>
                        }
                    }
                </div>
            </div>
            @if (_everyRegisterErrorList.Count > 0)
            {
                <div class="validation_summary">
                    @foreach (var error in _everyRegisterErrorList)
                    {
                        <div class="input_error">
                            @error
                        </div>
                    }
                </div>
            }
            <div class="login_form_tile_buttons">
                <button class="default_btn btn_green" type="submit" disabled="@_isProcessing">
                    @if (_isProcessing)
                    {
                        <span>Logowanie...</span>
                    }
                    else
                    {
                        <span>Zatwierdź</span>
                    }
                </button>
                <a href="/register" class="default_btn">Nie masz konta? Zarejestruj się</a>
            </div>
        </EditForm>

        <div class="additional-links">
            <a href="/resend-email-confirmation">Wyślij ponownie link potwierdzający email</a>
        </div>
    </section>

    <aside class="login_photo">
    </aside>
</div>

@code{
    private readonly LoginDto _loginDto = new();
    private bool _isProcessing;
    private string? _statusMessage;
    private bool _statusSuccess;
    
    private bool _emailIsInvalid;
    private ICollection<string> _emailErrors = [];
    private bool _passwordIsInvalid;
    private ICollection<string> _passwordErrors = [];
    
    private List<string> _everyRegisterErrorList = [];

    protected override void OnInitialized()
    {
        // Sprawdzamy parametry, które wskazują na przekierowania z innych przepływów
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryString = System.Web.HttpUtility.ParseQueryString(uri.Query);
    
        var emailConfirmed = queryString["emailConfirmed"];
        if (emailConfirmed == "true")
        {
            _statusMessage = "Email został potwierdzony. Możesz się teraz zalogować.";
            _statusSuccess = true;
        }
    
        var passwordReset = queryString["passwordReset"];
        if (passwordReset == "true")
        {
            _statusMessage = "Hasło zostało pomyślnie zresetowane. Możesz się teraz zalogować.";
            _statusSuccess = true;
        }
    
        var error = queryString["error"];
        if (!string.IsNullOrEmpty(error))
        {
            _statusMessage = $"Wystąpił błąd: {error}";
            _statusSuccess = false;
        }

        base.OnInitialized();
    }

    private async Task HandleLogin()
    {
        _isProcessing = true;
        _statusMessage = null;
        
        _emailIsInvalid = false;
        _passwordIsInvalid = false;
        _emailErrors = [];
        _passwordErrors = [];
        
        StateHasChanged();
        
        LoginRequest loginRequest = new(Email: _loginDto.Email, Password: _loginDto.Password);

        Result<LoginResponse?> response =
            await ApiClient.PostWithResultAsync<LoginRequest, LoginResponse>(
                $"{EnvironmentConfiguration.AuthUrl}application-users/login",
                loginRequest);
            
        if (response is { IsSuccess: true, Value: not null })
        {
            string parsedToken = response.Value.AccessToken.Replace("\"", string.Empty);
            await LocalStorage.SetItemAsync("token", parsedToken);
            await LocalStorage.SetItemAsync("token_expires", response.Value.AccessTokenExpiresAt);

            // Store refresh token if it's provided
            if (!string.IsNullOrEmpty(response.Value.RefreshToken))
            {
                await LocalStorage.SetItemAsync("refresh_token", response.Value.RefreshToken);
                await LocalStorage.SetItemAsync("refresh_token_expires", response.Value.RefreshTokenExpiresAt);
            }

            await AuthStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/");
            _isProcessing = false;
        }

        if (response.IsInvalid())
        {
            (bool isInvalid, ICollection<string> errors) ProcessFieldErrors(string propertyName)
            {
                ICollection<string> fieldErrors = response.ExtractErrorMessagesForProperty(propertyName);
                bool hasErrors = fieldErrors.Count > 0;
                return (hasErrors, fieldErrors);
            }
            (_emailIsInvalid, _emailErrors) = ProcessFieldErrors(nameof(LoginRequest.Email));
            (_passwordIsInvalid, _passwordErrors) = ProcessFieldErrors(nameof(LoginRequest.Password));
            
            _everyRegisterErrorList = [];
            foreach (ICollection<string> errorList in new[]
                     {
                         _emailErrors, _passwordErrors
                     })
            {
                foreach (string error in errorList)
                {
                    _everyRegisterErrorList.Add(error);
                }
            }

            if (_everyRegisterErrorList.Count == 0)
            {
                _everyRegisterErrorList.AddRange(response.Errors);
                _everyRegisterErrorList.AddRange(response.ValidationErrors.Select(x=>x.ErrorMessage));
            }
            _isProcessing = false;
        }
    }

    private class LoginDto
    {
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
    }
}